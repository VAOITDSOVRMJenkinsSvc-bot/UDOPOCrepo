using CRM007.CRM.SDK.Core;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Crm.Sdk.Messages;
using System;
using System.Collections.Generic;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.UDO.Ratings.Messages;
using VRM.Integration.Servicebus.Logging.CRM.Util;
 using Logger = VRM.Integration.Servicebus.Core.Logger;
	/// <summary>
	/// VIMT LOB Component for UDOUDOcreateDisabilityDetails,UDOcreateDisabilityDetails method, Processor.
	/// Code Generated by IMS on: 6/11/2015 2:06:37 PM
	/// Version: 2015.06.02
	/// </summary>
	/// <param name=none></param>
	/// <returns>none</returns>
using VIMT.RatingWebService.Messages;
using VRM.Integration.Common;
namespace VRM.Integration.UDO.Ratings.Processors
{
	class UDOUDOcreateDisabilityDetailsProcessor 
	{
		public IMessageBase Execute(UDOcreateDisabilityDetailsRequest request)
		{
			//var request = message as UDOcreateDisabilityDetailsRequest;
			UDOcreateDisabilityDetailsResponse response = new UDOcreateDisabilityDetailsResponse();
			var progressString = "Top of Processor";

			if (request == null)
			{
				response.ExceptionMessage = "Called with no message";
				response.ExceptionOccured = true;
				return response;
			}

			Logger.Instance.Info(string.Format("Message Id:{0}, Type={2}, Recieved diagnostics message: {1}",
			request.MessageId,
			request.MessageId,
			GetType().FullName));

			OrganizationServiceProxy OrgServiceProxy;

			#region connect to CRM
			try
			{
				var CommonFunctions = new CRMCommonFunctions();

				OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

			}
			catch (Exception connectException)
			 {
				LogHelper.LogError(request.OrganizationName, "mcs_UDOcreateDisabilityDetails", request.UserId, "UDOUDOcreateDisabilityDetailsProcessor Processor, Progess:" + progressString, connectException);
				response.ExceptionMessage = "Failed to get CRMConnection";
				response.ExceptionOccured = true;
				return response;
			}
			#endregion

			progressString = "After Connection";

			try
			{
				// prefix = fnrtngdtfindRatingDataRequest();
				var findRatingDataRequest = new  VIMTfnrtngdtfindRatingDataRequest();
				findRatingDataRequest.LogTiming = request.LogTiming;
				findRatingDataRequest.LogSoap = request.LogSoap;
				findRatingDataRequest.Debug = request.Debug;
				findRatingDataRequest.RelatedParentEntityName = request.RelatedParentEntityName;
				findRatingDataRequest.RelatedParentFieldName = request.RelatedParentFieldName;
				findRatingDataRequest.RelatedParentId = request.RelatedParentId;
				findRatingDataRequest.UserId = request.UserId;
				findRatingDataRequest.OrganizationName = request.OrganizationName;
				
				findRatingDataRequest.mcs_filenumber = request.fileNumber;
				
				var findRatingDataResponse = findRatingDataRequest.SendReceive<VIMTfnrtngdtfindRatingDataResponse>(MessageProcessType.Local);
				progressString = "After VIMT EC Call";
				
				response.ExceptionMessage =findRatingDataResponse.ExceptionMessage;
				response.ExceptionOccured = findRatingDataResponse.ExceptionOccured;
				if (findRatingDataResponse.!=null) {
						var responseIds = new UDOUDOcreateDisabilityDetailsMultipleResponse();
						//instantiate the new Entity
						Entity thisNewEntity = new Entity();
						thisNewEntity.LogicalName = "";
					if (findRatingDataResponse..mcs_bilateralTypeName!=string.Empty)
					{
						thisNewEntity["udo_bilateral"]= findRatingDataResponse..mcs_bilateralTypeName;
					}
					if (findRatingDataResponse..mcs_bilateralTypeCode!=string.Empty)
					{
						thisNewEntity["udo_bilateralcd"]= findRatingDataResponse..mcs_bilateralTypeCode;
					}
					if (findRatingDataResponse..mcs_diagnosticTypeName!=string.Empty)
					{
						thisNewEntity["udo_diagnostictype"]= findRatingDataResponse..mcs_diagnosticTypeName;
					}
					if (findRatingDataResponse..mcs_diagnosticTypeCode!=string.Empty)
					{
						thisNewEntity["udo_diagnostictypecd"]= findRatingDataResponse..mcs_diagnosticTypeCode;
					}
					if (findRatingDataResponse..mcs_endDate!=string.Empty)
					{
						thisNewEntity["udo_enddate"]= findRatingDataResponse..mcs_endDate;
					}
					if (findRatingDataResponse..mcs_futureExamDate!=string.Empty)
					{
						thisNewEntity["udo_futureexamdate"]= findRatingDataResponse..mcs_futureExamDate;
					}
					if (findRatingDataResponse..mcs_hyphenatedDiagnosticTypeName!=string.Empty)
					{
						thisNewEntity["udo_hdiagnostic"]= findRatingDataResponse..mcs_hyphenatedDiagnosticTypeName;
					}
					if (findRatingDataResponse..mcs_hyphenatedDiagnosticTypeCode!=string.Empty)
					{
						thisNewEntity["udo_hdiagnosticcode"]= findRatingDataResponse..mcs_hyphenatedDiagnosticTypeCode;
					}
					if (findRatingDataResponse..mcs_hyphenatedRelatedDisabilityTypeName!=string.Empty)
					{
						thisNewEntity["udo_hrelateddisability"]= findRatingDataResponse..mcs_hyphenatedRelatedDisabilityTypeName;
					}
					if (findRatingDataResponse..mcs_hyphenatedRelatedDisabilityTypeCode!=string.Empty)
					{
						thisNewEntity["udo_hrelateddiscd"]= findRatingDataResponse..mcs_hyphenatedRelatedDisabilityTypeCode;
					}
					if (findRatingDataResponse..mcs_lastExamDate!=string.Empty)
					{
						thisNewEntity["udo_lastexamdate"]= findRatingDataResponse..mcs_lastExamDate;
					}
					if (findRatingDataResponse..mcs_majorIndicator!=string.Empty)
					{
						thisNewEntity["udo_majorind"]= findRatingDataResponse..mcs_majorIndicator;
					}
					if (findRatingDataResponse..mcs_militaryServicePeriodTypeName!=string.Empty)
					{
						thisNewEntity["udo_milsvcperiod"]= findRatingDataResponse..mcs_militaryServicePeriodTypeName;
					}
					if (findRatingDataResponse..mcs_militaryServicePeriodTypeCode!=string.Empty)
					{
						thisNewEntity["udo_milsvcperiodcd"]= findRatingDataResponse..mcs_militaryServicePeriodTypeCode;
					}
					if (findRatingDataResponse..mcs_paragraphTypeCode!=string.Empty)
					{
						thisNewEntity["udo_paragraphtype"]= findRatingDataResponse..mcs_paragraphTypeCode;
					}
					if (findRatingDataResponse..mcs_paragraphTypeCode!=string.Empty)
					{
						thisNewEntity["udo_paragraphtypecd"]= findRatingDataResponse..mcs_paragraphTypeCode;
					}
					if (findRatingDataResponse..mcs_previousServicePercent!=string.Empty)
					{
						thisNewEntity["udo_previousservice"]= findRatingDataResponse..mcs_previousServicePercent;
					}
					if (findRatingDataResponse..mcs_relatedDisabilityTypeName!=string.Empty)
					{
						thisNewEntity["udo_relateddisability"]= findRatingDataResponse..mcs_relatedDisabilityTypeName;
					}
					if (findRatingDataResponse..mcs_supplementalDecisionTypeName!=string.Empty)
					{
						thisNewEntity["udo_supplementaldec"]= findRatingDataResponse..mcs_supplementalDecisionTypeName;
					}
					if (findRatingDataResponse..mcs_supplementalDecisionTypeCode!=string.Empty)
					{
						thisNewEntity["udo_supplmenetaldeccd"]= findRatingDataResponse..mcs_supplementalDecisionTypeCode;
					}
					if (findRatingDataResponse..mcs_withholdingTypeName!=string.Empty)
					{
						thisNewEntity["udo_withholding"]= findRatingDataResponse..mcs_withholdingTypeName;
					}
					if (findRatingDataResponse..mcs_withholdingTypeCode!=string.Empty)
					{
						thisNewEntity["udo_withholdingcd"]= findRatingDataResponse..mcs_withholdingTypeCode;
					}
					if (findRatingDataResponse..mcs_withholdingPercent!=string.Empty)
					{
						thisNewEntity["udo_withholdingpercentage"]= findRatingDataResponse..mcs_withholdingPercent;
					}
					if (request.UDOUDOcreateDisabilityDetailsRelatedEntitiesInfo!=null){
						foreach (var relatedItem in request.UDOUDOcreateDisabilityDetailsRelatedEntitiesInfo)
						{
						    thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
						}
					}
					responseIds.newUDOUDOcreateDisabilityDetailsId = OrgServiceProxy.Create(thisNewEntity);
					UDOUDOcreateDisabilityDetailsArray.Add(responseIds);
				}
				response.UDOUDOcreateDisabilityDetailsInfo =UDOUDOcreateDisabilityDetailsArray.ToArray();
				
			//added to generated code
			if (request.udo_ratingId != System.Guid.Empty)
			{
				var parent = new Entity();
				parent.Id = request.udo_ratingId;
				parent.LogicalName = "udo_rating";
				parent["udo_disabilitydetailcomplete"] = true;
				 parent["udo_disabilitydetailmessage"] = "";
				OrgServiceProxy.Update(parent);
			}
				return response;
			}
			catch (Exception connectException)
			 {
				LogHelper.LogError(request.OrganizationName, "udo_disabilitydetail", request.UserId, "UDOUDOcreateDisabilityDetailsProcessor Processor, Progess:" + progressString, connectException);
				response.ExceptionMessage = "Failed to Map EC data to LOB";
				response.ExceptionOccured = true;
			if (request.udo_ratingId != System.Guid.Empty)
			{
				var parent = new Entity();
				parent.Id = request.udo_ratingId;
				parent.LogicalName = "udo_rating";
				 parent["udo_disabilitydetailmessage"] = "";
				OrgServiceProxy.Update(parent);
			}
				return response;
			}
		}
	}
}
