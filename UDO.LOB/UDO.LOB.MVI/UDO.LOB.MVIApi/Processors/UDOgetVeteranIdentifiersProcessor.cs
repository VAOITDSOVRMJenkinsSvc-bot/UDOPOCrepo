using System;
using System.Collections.Specialized;
using System.Linq;
using UDO.LOB.Core;
using UDO.LOB.Extensions;
using UDO.LOB.Extensions.Configuration;
using UDO.LOB.Extensions.Logging;
using UDO.LOB.MVI.Messages;
using VEIS.Messages.VeteranWebService;

/// <summary>
/// VIMT LOB Component for UDOgetVeteranIdentifiers,getVeteranIdentifiers method, Processor.
/// Code Generated by IMS on: 6/5/2015 6:02:14 PM
/// Version: 2015.19.01
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace UDO.LOB.MVI.Processors
{
    class UDOgetVeteranIdentifiersProcessor
    {

        // REM: New variables
        private const string method = "UDOgetVeteranIdentifiersProcessor";
        private Uri veisBaseUri;
        private LogSettings logSettings { get; set; }

        public IMessageBase Execute(UDOgetVeteranIdentifiersRequest request)
        {
            UDOgetVeteranIdentifiersResponse response = new UDOgetVeteranIdentifiersResponse();
            var progressString = "Top of Processor";

            LogHelper.LogDebug(request.MessageId, request.OrganizationName, request.UserId, "UDOgetVeteranIdentifiersProcessor", "Top", request.Debug);

            if (request == null)
            {
                LogHelper.LogError(request.MessageId, request.OrganizationName, request.UserId, $"{GetType().FullName}.Execute",
                        $"<< Exit from {GetType().FullName}. Recieved a null {request.GetType().Name} message request or request.Person.");

                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }
            if (request.DiagnosticsContext == null && request != null)
            {
                request.DiagnosticsContext = new DiagnosticsContext()
                {
                    AgentId = request.UserId,
                    MessageTrigger = method,
                    OrganizationName = request.OrganizationName,
                    StationNumber = request.LegacyServiceHeaderInfo != null ? request.LegacyServiceHeaderInfo.StationNumber : "NA"
                };
            }
            InitProcessor(request);

            try
            {
                var findVeteranByPtcpntIdRequest = new VEISvetPctfindVeteranByPtcpntIdRequest();
                findVeteranByPtcpntIdRequest.MessageId = request.MessageId;
                findVeteranByPtcpntIdRequest.LogTiming = request.LogTiming;
                findVeteranByPtcpntIdRequest.LogSoap = request.LogSoap;
                findVeteranByPtcpntIdRequest.Debug = request.Debug;
                findVeteranByPtcpntIdRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findVeteranByPtcpntIdRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findVeteranByPtcpntIdRequest.RelatedParentId = request.RelatedParentId;
                findVeteranByPtcpntIdRequest.UserId = request.UserId;
                findVeteranByPtcpntIdRequest.OrganizationName = request.OrganizationName;
                findVeteranByPtcpntIdRequest.LegacyServiceHeaderInfo = new VEIS.Core.Messages.LegacyHeaderInfo
                {
                    ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                    ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                    LoginName = request.LegacyServiceHeaderInfo.LoginName,
                    StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                };
                //non standard fields
                findVeteranByPtcpntIdRequest.mcs_ptcpntid = request.ptcpntId;

				//CSDev Updated to New Overloaded Method
				var findVeteranByPtcpntIdResponse = WebApiUtility.SendReceive<VEISvetPctfindVeteranByPtcpntIdResponse>(findVeteranByPtcpntIdRequest, WebApiType.VEIS);
                if (request.LogSoap || findVeteranByPtcpntIdResponse.ExceptionOccurred)
                {
                    if (findVeteranByPtcpntIdResponse.SerializedSOAPRequest != null || findVeteranByPtcpntIdResponse.SerializedSOAPResponse != null)
                    {
                        var requestResponse = findVeteranByPtcpntIdResponse.SerializedSOAPRequest + findVeteranByPtcpntIdResponse.SerializedSOAPResponse;
                        LogHelper.LogDebug(request.MessageId, request.OrganizationName, request.UserId, MethodInfo.GetThisMethod().Method, $"VEISvetPctfindVeteranByPtcpntIdRequest Request/Response {requestResponse}", true);
                    }
                }
                progressString = "After VEIS EC Call";

                response.ExceptionMessage = findVeteranByPtcpntIdResponse.ExceptionMessage;
                response.ExceptionOccured = findVeteranByPtcpntIdResponse.ExceptionOccurred;
                if (findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo != null)
                {
                    if (findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetCorpRecordInfo != null)
                    {
                        var shrinq2Person = findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetCorpRecordInfo;
                        response.UDOgetVeteranIdentifiersInfo = new UDOgetVeteranIdentifiers();
                        if (shrinq2Person.mcs_ptcpntId != null && shrinq2Person.mcs_ptcpntId != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_ParticipantID = shrinq2Person.mcs_ptcpntId;
                        }
                        if (shrinq2Person.mcs_fileNumber != null && shrinq2Person.mcs_fileNumber != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_FileNumber = shrinq2Person.mcs_fileNumber;
                        }
                        if (shrinq2Person.mcs_ssn != null && shrinq2Person.mcs_ssn != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_SSN = shrinq2Person.mcs_ssn;
                        }
                        if (shrinq2Person.mcs_sensitiveLevelOfRecord != null && shrinq2Person.mcs_sensitiveLevelOfRecord != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_SensitivityLevel = shrinq2Person.mcs_sensitiveLevelOfRecord;
                        }
                        if (shrinq2Person.mcs_firstName != null && shrinq2Person.mcs_firstName != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_FirstName = shrinq2Person.mcs_firstName;
                        }
                        if (shrinq2Person.mcs_lastName != null && shrinq2Person.mcs_lastName != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_LastName = shrinq2Person.mcs_lastName;
                        }
                        if (shrinq2Person.mcs_middleName != null && shrinq2Person.mcs_middleName != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_MiddleName = shrinq2Person.mcs_middleName;
                        }
                        if (shrinq2Person.mcs_phoneNumberOne != null && shrinq2Person.mcs_phoneNumberOne != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_PhoneNumber = "(" + shrinq2Person.mcs_areaNumberOne + ") " + shrinq2Person.mcs_phoneNumberOne.Substring(0, 3) + "-" + shrinq2Person.mcs_phoneNumberOne.Substring(3);
                        }
                        if (findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_SEX_CODE != null && findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_SEX_CODE != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_Gender = findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_SEX_CODE;
                        }
                        if (findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_CLAIM_FOLDER_LOCATION != null && findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_CLAIM_FOLDER_LOCATION != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_SOJ = findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_CLAIM_FOLDER_LOCATION;
                        }
                        if (findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_DATE_OF_DEATH != null && findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_DATE_OF_DEATH != string.Empty)
                        {
                            response.UDOgetVeteranIdentifiersInfo.crme_DateofDeath = findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.mcs_DATE_OF_DEATH;
                        }
                        if (findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.VEISvetPctSERVICEInfo != null)
                        {
                            var serviceDTO = findVeteranByPtcpntIdResponse.VEISvetPctreturnInfo.VEISvetPctvetBirlsRecordInfo.VEISvetPctSERVICEInfo;
                            var BOS = "";

                            foreach (var item in serviceDTO)
                            {
                                if (!string.IsNullOrEmpty(item.mcs_BRANCH_OF_SERVICE))
                                {
                                    if (!BOS.Contains(LongBranchOfService(item.mcs_BRANCH_OF_SERVICE)))
                                    {
                                        if (!string.IsNullOrEmpty(BOS))
                                        {
                                            BOS += ":";
                                        }
                                        BOS += LongBranchOfService(item.mcs_BRANCH_OF_SERVICE);
                                    }
                                }
                            }
                            response.UDOgetVeteranIdentifiersInfo.crme_BranchOfService = BOS;

                            var charOfSvcCode = serviceDTO.OrderByDescending(h => DateTime.TryParse(h.mcs_ENTERED_ON_DUTY_DATE, out DateTime newDateTime)).FirstOrDefault().mcs_CHAR_OF_SVC_CODE;
                            if (!string.IsNullOrEmpty(charOfSvcCode)) response.UDOgetVeteranIdentifiersInfo.crme_characterofdischarge = charOfSvcCode;

                        }
                    }
                }
                return response;
            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.MessageId, request.OrganizationName,request.UserId, "UDOgetVeteranIdentifiersProcessor Processor, Progess:" + progressString, connectException.Message);
                if (response == null)
                {
                    response = new UDOgetVeteranIdentifiersResponse();
                } 
                response.ExceptionMessage = "Failed to Map EC FIelds";
                response.ExceptionOccured = true;
                return response;
            }
        }
        private string LongBranchOfService(string branchcode)
        {
            //JS switch (branchcode.trim())
            switch (branchcode.Trim())
            {
                case "AF": return "AIR FORCE (AF)";
                case "A": return "ARMY (ARMY)";
                //ARMY AIR CORPS
                case "CG": return "COAST GUARD (CG)";
                case "CA": return "COMMONWEALTH ARMY (CA)";
                case "GCS": return "GUERRILLA AND COMBINATION SVC (GCS)";
                case "M": return "MARINES (M)";
                case "MM": return "MERCHANT MARINES (MM)";
                case "NOAA": return "NATIONAL OCEANIC & ATMOSPHERIC ADMINISTRATION (NOAA)";
                //NAVY (NAVY)
                case "PHS": return "PUBLIC HEALTH SVC (PHS)";
                case "RSS": return "REGULAR PHILIPPINE SCOUT (RSS)";
                //REGULAR PHILIPPINE SCOUT COMBINED WITH SPECIAL
                case "RPS": return "PHILIPPINE SCOUT OR COMMONWEALTH ARMY SVC (RPS)";
                case "SPS": return "SPECIAL PHILIPPINE SCOUTS (SPS)";
                case "WAC": return "WOMEN'S ARMY CORPS (WAC)";
            }
            return branchcode;
        }

        private void InitProcessor(UDOgetVeteranIdentifiersRequest request)
        {
            try
            {
                if (logSettings == null)
                {
                    logSettings = new LogSettings
                    {
                        CallingMethod = method,
                        Org = request.OrganizationName,
                        UserId = request.UserId
                    };
                }

                NameValueCollection veisConfigurations = VEISConfiguration.GetConfigurationSettings();
                veisBaseUri = new Uri(veisConfigurations.Get(VEISConfiguration.ECUri));
            }
            catch
            {
                // TODO: Handle any exceptions
            }
        }
    }
}
