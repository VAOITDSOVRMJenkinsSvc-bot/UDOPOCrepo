using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Tooling.Connector;
using System;
using System.Collections.Generic;
using UDO.LOB.Claims.Messages;
using UDO.LOB.Core;
using UDO.LOB.Extensions;
using UDO.LOB.Extensions.Logging;
using VEIS.Core.Messages;
using VEIS.Messages.BenefitClaimService;

/// <summary>
/// VIMT LOB Component for UDOcreateUDOLifecycles,createUDOLifecycles method, Processor.
/// Code Generated by IMS on: 5/29/2015 3:11:20 PM
/// Version: 2015.05.05
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace UDO.LOB.Claims.Processors
{
    internal class UDOcreateUDOLifecyclesProcessor
    {
        private bool _debug { get; set; }

        private string LogBuffer { get; set; }

        private const string method = "UDOcreateUDOLifecyclesProcessor";
        private string pclrPcanExplanation = null;

        public IMessageBase Execute(UDOcreateUDOLifecyclesRequest request)
        {
            UDOcreateUDOLifecyclesResponse response = new UDOcreateUDOLifecyclesResponse { MessageId = request.MessageId };
            string progressString = "Top of Processor";
            LogBuffer = string.Empty;
            _debug = request.Debug;

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }
            if (request.DiagnosticsContext == null)
            {
                request.DiagnosticsContext = new DiagnosticsContext()
                {
                    AgentId = request.UserId,
                    OrganizationName = request.OrganizationName,
                    StationNumber = request.LegacyServiceHeaderInfo != null ? request.LegacyServiceHeaderInfo.StationNumber : string.Empty
                };
            }
            TraceLogger aiLogger = new TraceLogger("UDOcreateUDOLifecyclesProcessor.Execute", request);
            if (request.DiagnosticsContext == null && request != null)
            {
                request.DiagnosticsContext = new DiagnosticsContext()
                {
                    AgentId = request.UserId,
                    MessageTrigger = "UDOgetMilitaryInformationProcessor",
                    OrganizationName = request.OrganizationName,
                    StationNumber = request.LegacyServiceHeaderInfo.StationNumber != null ? request.LegacyServiceHeaderInfo.StationNumber : "NA"
                };
            }

            #region connect to CRM
            CrmServiceClient OrgServiceProxy = null;
            try
            {
                OrgServiceProxy = ConnectionCache.GetProxy();
            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.MessageId, request.OrganizationName, request.UserId, "UDOgetMilitaryInformationProcessor", connectException);
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            try
            {
                // Replaced: VIMTfbendtlfindBenefitClaimDetailRequest = VEISfbendtlffindBenefitClaimDetailRequest
                VEISfbendtlfindBenefitClaimDetailRequest findBenefitClaimDetailRequest = new VEISfbendtlfindBenefitClaimDetailRequest();
                findBenefitClaimDetailRequest.Debug = request.Debug;
                findBenefitClaimDetailRequest.LogSoap = request.LogSoap;
                findBenefitClaimDetailRequest.LogTiming = request.LogTiming;
                findBenefitClaimDetailRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findBenefitClaimDetailRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findBenefitClaimDetailRequest.RelatedParentId = request.RelatedParentId;
                findBenefitClaimDetailRequest.UserId = request.UserId;
                findBenefitClaimDetailRequest.OrganizationName = request.OrganizationName;
                findBenefitClaimDetailRequest.LegacyServiceHeaderInfo = new LegacyHeaderInfo
                {
                    ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                    ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                    LoginName = request.LegacyServiceHeaderInfo.LoginName,

                    StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                };
                //non standard fields
                findBenefitClaimDetailRequest.mcs_benefitclaimid = request.claimId.ToString();
                LogHelper.LogInfo("Looking for benefitclaimdetail for claim:" + request.claimId.ToString());

                // REM: Invoke VEIS endpoint
                var findBenefitClaimDetailResponse = WebApiUtility.SendReceive<VEISfbendtlfindBenefitClaimDetailResponse>(findBenefitClaimDetailRequest, WebApiType.VEIS);
                progressString = "After VEIS EC Call";

                if (request.LogSoap || findBenefitClaimDetailResponse.ExceptionOccurred)
                {
                    if (findBenefitClaimDetailResponse.SerializedSOAPRequest != null || findBenefitClaimDetailResponse.SerializedSOAPResponse != null)
                    {
                        var requestResponse = findBenefitClaimDetailResponse.SerializedSOAPRequest + findBenefitClaimDetailResponse.SerializedSOAPResponse;
                        LogHelper.LogDebug(request.MessageId, request.OrganizationName, request.UserId, MethodInfo.GetThisMethod().Method, $"VEISfbendtlfindBenefitClaimDetailRequest Request/Response {requestResponse}", true);
                    }
                }

                response.ExceptionMessage = findBenefitClaimDetailResponse.ExceptionMessage;
                response.ExceptionOccured = findBenefitClaimDetailResponse.ExceptionOccurred;

                #region Create Lifecycles for each Claim
                //RC - eric - while you could do it here, you are delaying the creation of all claims.  I would move this down below just like you have evidence and other things
                //so you loop through the ID"s you need, but after claims are created.  The reason is because the claims is the first grid the user will see.
                // Replaced: VEISfbendtlbenefitClaimRecordbclmInfo.VEISfbendtllifeCycleRecordbclmInfo.VEISfbendtllifeCycleRecordsbclmInfo
                //          = VEISfbendtlfreturnInfo.VEISfbendtlflifeCycleRecordInfo.VEISfbendtlflifeCycleRecordsInfo
                if (findBenefitClaimDetailResponse.VEISfbendtlfreturnInfo.VEISfbendtlflifeCycleRecordInfo != null)
                {
                    VEISfbendtlflifeCycleRecordsMultipleResponse[] shrinqbcLifeCycle = findBenefitClaimDetailResponse.VEISfbendtlfreturnInfo.VEISfbendtlflifeCycleRecordInfo.VEISfbendtlflifeCycleRecordsInfo;

                    if (shrinqbcLifeCycle != null)
                    {
                        LogHelper.LogInfo("Found lifecycles to process");
                        List<UDOcreateUDOLifecyclesMultipleResponse> UDOcreateUDOLifecyclesArray = new List<UDOcreateUDOLifecyclesMultipleResponse>();

                        progressString = "After Connection";
                        UDOcreateUDOLifecyclesMultipleResponse responseIds = new UDOcreateUDOLifecyclesMultipleResponse();
                        OrganizationRequestCollection requestCollection = new OrganizationRequestCollection();
                        int lifeCycleCount = 0;
                        DateTime latestLifecycle = new DateTime(1);
                        #region create lifecycle records
                        
                        foreach (VEISfbendtlflifeCycleRecordsMultipleResponse shrinqbcLifeCycleItem in shrinqbcLifeCycle)
                        {
                            Entity thisLifecycle = new Entity { LogicalName = "udo_lifecycle" };

                            if (request.ownerId != System.Guid.Empty)
                            {
                                thisLifecycle["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                            }

                            thisLifecycle["udo_lifecycle"] = "Life Cycle Summary";

                            if (shrinqbcLifeCycleItem.mcs_lifeCycleStatusTypeName != string.Empty)
                            {
                                thisLifecycle["udo_status"] = shrinqbcLifeCycleItem.mcs_lifeCycleStatusTypeName;
                            }
                            if (shrinqbcLifeCycleItem.mcs_statusReasonTypeName != string.Empty)
                            {
                                thisLifecycle["udo_pcanpclrreason"] = shrinqbcLifeCycleItem.mcs_statusReasonTypeName;
                            }
                            if (shrinqbcLifeCycleItem.mcs_stationofJurisdiction != string.Empty)
                            {
                                thisLifecycle["udo_claimstation"] = shrinqbcLifeCycleItem.mcs_stationofJurisdiction;
                            }
                            if (shrinqbcLifeCycleItem.mcs_changedDate != string.Empty)
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(shrinqbcLifeCycleItem.mcs_changedDate, out newDateTime))
                                {
                                    thisLifecycle["udo_changedate"] = newDateTime;
                                }
                            }
                            if (shrinqbcLifeCycleItem.mcs_actionStationNumber != string.Empty)
                            {
                                thisLifecycle["udo_actionstation"] = shrinqbcLifeCycleItem.mcs_actionStationNumber;
                            }
                            if (shrinqbcLifeCycleItem.mcs_actionFirstName != string.Empty && shrinqbcLifeCycleItem.mcs_actionLastName != string.Empty && shrinqbcLifeCycleItem.mcs_actionMiddleName != string.Empty)
                            {
                                thisLifecycle["udo_actionperson"] = shrinqbcLifeCycleItem.mcs_actionLastName + ", " + shrinqbcLifeCycleItem.mcs_actionFirstName + " , " + shrinqbcLifeCycleItem.mcs_actionMiddleName;
                            }
                            if (shrinqbcLifeCycleItem.mcs_actionFirstName != string.Empty && shrinqbcLifeCycleItem.mcs_actionLastName != string.Empty)
                            {
                                thisLifecycle["udo_actionperson"] = shrinqbcLifeCycleItem.mcs_actionLastName + ", " + shrinqbcLifeCycleItem.mcs_actionFirstName;
                            }
                            if (shrinqbcLifeCycleItem.mcs_benefitClaimID != string.Empty && shrinqbcLifeCycleItem.mcs_lifeCycleStatusTypeName != string.Empty)
                            {
                                thisLifecycle["udo_lifecycle"] = shrinqbcLifeCycleItem.mcs_benefitClaimID + " - " +
                                                                    shrinqbcLifeCycleItem.mcs_lifeCycleStatusTypeName;
                            }
                            if (shrinqbcLifeCycleItem.mcs_reasonText != string.Empty)
                            {
                                thisLifecycle["udo_explanation"] = shrinqbcLifeCycleItem.mcs_reasonText;
                                if (DateTime.Compare(DateTime.Parse(shrinqbcLifeCycleItem.mcs_changedDate), latestLifecycle) > 0)
                                {
                                    latestLifecycle = DateTime.Parse(shrinqbcLifeCycleItem.mcs_changedDate);
                                    pclrPcanExplanation = shrinqbcLifeCycleItem.mcs_reasonText;
                                }
                            }

                            if (request.UDOcreateUDOLifecyclesRelatedEntitiesInfo != null)
                            {
                                foreach (UDOcreateUDOLifecyclesRelatedEntitiesMultipleRequest relatedItem in request.UDOcreateUDOLifecyclesRelatedEntitiesInfo)
                                {
                                    thisLifecycle[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                                }
                            }
                            CreateRequest createExamData = new CreateRequest
                            {
                                Target = thisLifecycle
                            };
                            requestCollection.Add(createExamData);
                            lifeCycleCount += 1;


                        }
                        #endregion

                        if (lifeCycleCount > 0)
                        {
                            ExecuteMultipleHelperResponse result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, Guid.Empty, request.Debug);

                            if (_debug)
                            {
                                LogBuffer += result.LogDetail;
                                LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
                            }

                            if (result.IsFaulted)
                            {
                                LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
                                response.ExceptionMessage = result.FriendlyDetail;
                                response.ExceptionOccured = true;
                                return response;
                            }
                        }

                        string logInfo = string.Format("Number of LifeCycles Created: {0}", lifeCycleCount);
                        LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "LifeCycle Records Created", logInfo);
                    }
                }
                #endregion

                //added to generated code
                if (request.udo_claimId != System.Guid.Empty)
                {
                    Entity parent = new Entity();
                    parent.Id = request.udo_claimId;
                    parent.LogicalName = "udo_claim";
                    parent["udo_lifecyclecomplete"] = true;
                    if (pclrPcanExplanation != null)
                    {
                        parent["udo_pclrpcanexplanation"] = pclrPcanExplanation;
                    }

                    OrgServiceProxy.Update(parent);
                }
                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, request.MessageId, method + " Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to process UDO Lifecycle data";
                response.ExceptionOccured = true;
                return response;
            }
            finally
            {
                if (OrgServiceProxy != null)
                {
                    OrgServiceProxy.Dispose();
                }
            }
        }
    }
}