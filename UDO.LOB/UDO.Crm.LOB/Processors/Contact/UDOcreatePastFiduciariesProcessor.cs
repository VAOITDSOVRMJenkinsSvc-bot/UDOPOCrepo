using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Linq;
using VIMT.ClaimantWebService.Messages;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using VRM.Integration.UDO.Common;
using VRM.Integration.UDO.Contact.Messages;

/// <summary>
/// VIMT LOB Component for UDOcreatePastFiduciaries,createPastFiduciaries method, Processor.
/// Code Generated by IMS on: 5/8/2015 2:31:27 PM
/// Version: 2015.05.05
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>

namespace VRM.Integration.UDO.Contact.Processors
{
    class UDOcreatePastFiduciariesProcessor
    {
        private bool _debug { get; set; }
        private const string method = "UDOcreatePastFiduciariesProcessor";
        private string LogBuffer { get; set; }

        public IMessageBase Execute(UDOcreatePastFiduciariesRequest request)
        {
            LogBuffer = string.Empty;
            _debug = request.Debug;

            //var request = message as createPastFiduciariesRequest;
            UDOcreatePastFiduciariesResponse response = new UDOcreatePastFiduciariesResponse();
            var progressString = "Top of Processor";

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            OrganizationServiceProxy OrgServiceProxy;

            #region connect to CRM
            try
            {
                var CommonFunctions = new CRMConnect();

                OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, "UDOcreatePastFiduciariesProcessor Processor, Connection Error", connectException.Message);
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            progressString = "After Connection, Starting Request";
            var requestCollection = new OrganizationRequestCollection();

            //try
            //{
            //    QueryByAttribute querybyexpression = new QueryByAttribute("udo_pastfiduciary");
            //    QueryByAttribute querybyexpression2 = new QueryByAttribute("udo_pastpoa");

            //    querybyexpression.ColumnSet = new ColumnSet("udo_pastfiduciaryid");
            //    querybyexpression2.ColumnSet = new ColumnSet("udo_pastpoaid");

            //    if (request.DependentId == Guid.Empty)
            //    {
            //        querybyexpression.Attributes.AddRange("udo_veteranid");
            //        querybyexpression2.Attributes.AddRange("udo_veteranid");

            //        //  Value of queried attribute to return    
            //        querybyexpression.Values.AddRange(request.VeteranId);
            //        querybyexpression2.Values.AddRange(request.VeteranId);
            //    }
            //    else
            //    {
            //        querybyexpression.Attributes.AddRange("udo_dependentid");
            //        querybyexpression2.Attributes.AddRange("udo_dependentid");
            //        //  Value of queried attribute to return    
            //        querybyexpression.Values.AddRange(request.DependentId);
            //        querybyexpression2.Values.AddRange(request.DependentId);
            //    }

            //    //  Query passed to the service proxy    
            //    EntityCollection retrieved = OrgServiceProxy.RetrieveMultiple(querybyexpression);
            //    EntityCollection retrieved2 = OrgServiceProxy.RetrieveMultiple(querybyexpression2);
            //    //  Iterate through returned collection    
            //    foreach (var c in retrieved.Entities)
            //    {
            //        DeleteRequest deleteRequest = new DeleteRequest
            //        {
            //            Target = new EntityReference("udo_pastfiduciary", c.Id)
            //        };
            //        requestCollection.Add(deleteRequest);
            //    }

            //    foreach (var d in retrieved2.Entities)
            //    {
            //        DeleteRequest deleteRequest = new DeleteRequest
            //        {
            //            Target = new EntityReference("udo_pastpoa", d.Id)
            //        };
            //        requestCollection.Add(deleteRequest);
            //    }

            //    if (requestCollection.Count() > 0)
            //    {
            //        var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

            //        if (_debug)
            //        {
            //            LogBuffer += result.LogDetail;
            //            LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
            //        }

            //        if (result.IsFaulted)
            //        {
            //            LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
            //            response.ExceptionMessage = result.FriendlyDetail;
            //            response.ExceptionOccured = true;
            //            return response;
            //        }
            //    }

            //    string logInfo = string.Format("udo_pastfiduciary Records Deleted: {0}, udo_pastpoa Records Deleted: {0}", retrieved.Entities.Count, retrieved2.Entities.Count);
            //    LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "udo_pastfiduciary, udo_pastpoa Records Deleted", logInfo);

            //}
            //catch (Exception ExecutionException)
            //{
            //    LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, method + " Processor, Progess:" + progressString, ExecutionException);
            //    response.ExceptionMessage = "Failed to Delete Old Fiducaries + POAs";
            //    response.ExceptionOccured = true;
            //    return response;
            //}

            try
            {
                 //if this doesn't contain anything, don't go asking for it!
                if (!string.IsNullOrEmpty(request.fileNumber))
                {
                    // prefix = afidpoafindAllFiduciaryPoaRequest();
                    var findAllFiduciaryPoaRequest = new VIMTafidpoafindAllFiduciaryPoaRequest();
                    findAllFiduciaryPoaRequest.LogTiming = request.LogTiming;
                    findAllFiduciaryPoaRequest.LogSoap = request.LogSoap;
                    findAllFiduciaryPoaRequest.Debug = request.Debug;
                    findAllFiduciaryPoaRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                    findAllFiduciaryPoaRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                    findAllFiduciaryPoaRequest.RelatedParentId = request.RelatedParentId;
                    findAllFiduciaryPoaRequest.UserId = request.UserId;
                    findAllFiduciaryPoaRequest.OrganizationName = request.OrganizationName;

                    findAllFiduciaryPoaRequest.mcs_filenumber = request.fileNumber;
                    if (request.LegacyServiceHeaderInfo != null)
                    {
                        findAllFiduciaryPoaRequest.LegacyServiceHeaderInfo = new VIMT.ClaimantWebService.Messages.HeaderInfo
                        {
                            ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                            ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                            LoginName = request.LegacyServiceHeaderInfo.LoginName,
                            StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                        };
                    }
                    // TODO(TN): Comment to remediate
                    var findAllFiduciaryPoaResponse = findAllFiduciaryPoaRequest.SendReceive<VIMTafidpoafindAllFiduciaryPoaResponse>(MessageProcessType.Local);
                    progressString = "After VIMT EC Call";

                    response.ExceptionMessage = findAllFiduciaryPoaResponse.ExceptionMessage;
                    response.ExceptionOccured = findAllFiduciaryPoaResponse.ExceptionOccured;


                    if (findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo != null)
                    {
                        System.Collections.Generic.List<UDOcreatePastFiduciariesMultipleResponse> UDOcreatePastFiduciariesArray = new System.Collections.Generic.List<UDOcreatePastFiduciariesMultipleResponse>();
                        var shrinqfPersonOrg3 = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoapastFiduciariesclmsInfo;
                        if (shrinqfPersonOrg3 != null)
                        {
                            foreach (var shrinqfPersonOrg3Item in shrinqfPersonOrg3)
                            {
                                var responseIds = new UDOcreatePastFiduciariesMultipleResponse();
                                //instantiate the new Entity
                                Entity thisNewEntity = new Entity();
                                thisNewEntity.LogicalName = "udo_pastfiduciary";
                                if (request.ownerId != System.Guid.Empty)
                                {
                                    thisNewEntity["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                                }
                                else
                                {
                                    LogHelper.LogError(request.OrganizationName, request.UserId, "Create FID", "No Owner");
                                }
                                if (shrinqfPersonOrg3Item.mcs_personOrgName != string.Empty)
                                {
                                    thisNewEntity["udo_name"] = shrinqfPersonOrg3Item.mcs_personOrgName;
                                }
                                if (shrinqfPersonOrg3Item.mcs_veteranPtcpntID != string.Empty)
                                {
                                    thisNewEntity["udo_vetptcpntid"] = shrinqfPersonOrg3Item.mcs_veteranPtcpntID;
                                }
                                if (!string.IsNullOrEmpty(shrinqfPersonOrg3Item.mcs_personOrganizationCode))
                                {
                                    thisNewEntity["udo_cd"] = shrinqfPersonOrg3Item.mcs_personOrganizationCode;
                                }
                                if (shrinqfPersonOrg3Item.mcs_temporaryCustodianIndicator != string.Empty)
                                {
                                    thisNewEntity["udo_tempcustodian"] = shrinqfPersonOrg3Item.mcs_temporaryCustodianIndicator;
                                }
                                if (shrinqfPersonOrg3Item.mcs_statusCode != string.Empty)
                                {
                                    thisNewEntity["udo_status"] = shrinqfPersonOrg3Item.mcs_statusCode;
                                }
                                if (shrinqfPersonOrg3Item.mcs_relationshipName != string.Empty)
                                {
                                    thisNewEntity["udo_relationship"] = shrinqfPersonOrg3Item.mcs_relationshipName;
                                }
                                if (shrinqfPersonOrg3Item.mcs_rateName != string.Empty)
                                {
                                    thisNewEntity["udo_rate"] = shrinqfPersonOrg3Item.mcs_rateName;
                                }
                                if (shrinqfPersonOrg3Item.mcs_prepositionalPhraseName != string.Empty)
                                {
                                    thisNewEntity["udo_phrase"] = shrinqfPersonOrg3Item.mcs_prepositionalPhraseName;
                                }
                                if (shrinqfPersonOrg3Item.mcs_personOrgPtcpntID != string.Empty)
                                {
                                    thisNewEntity["udo_personorgptcpnt"] = shrinqfPersonOrg3Item.mcs_personOrgPtcpntID;
                                }
                                if (shrinqfPersonOrg3Item.mcs_personOrgName != string.Empty)
                                {
                                    thisNewEntity["udo_name"] = shrinqfPersonOrg3Item.mcs_personOrgName;
                                }
                                if (shrinqfPersonOrg3Item.mcs_personOrganizationName != string.Empty)
                                {
                                    thisNewEntity["udo_personorgname"] = shrinqfPersonOrg3Item.mcs_personOrganizationName;
                                }
                                if (shrinqfPersonOrg3Item.mcs_journalUserID != string.Empty)
                                {
                                    thisNewEntity["udo_jrnuser"] = shrinqfPersonOrg3Item.mcs_journalUserID;
                                }
                                if (shrinqfPersonOrg3Item.mcs_journalStatusTypeCode != string.Empty)
                                {
                                    thisNewEntity["udo_jrnstatus"] = shrinqfPersonOrg3Item.mcs_journalStatusTypeCode;
                                }
                                if (shrinqfPersonOrg3Item.mcs_journalObjectID != string.Empty)
                                {
                                    thisNewEntity["udo_jrnobj"] = shrinqfPersonOrg3Item.mcs_journalObjectID;
                                }
                                if (shrinqfPersonOrg3Item.mcs_journalLocationID != string.Empty)
                                {
                                    thisNewEntity["udo_jrnloc"] = shrinqfPersonOrg3Item.mcs_journalLocationID;
                                }
                                if (shrinqfPersonOrg3Item.mcs_journalDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg3Item.mcs_journalDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_jrndate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg3Item.mcs_healthcareProviderReleaseIndicator != string.Empty)
                                {
                                    thisNewEntity["udo_hcproviderrelease"] = shrinqfPersonOrg3Item.mcs_healthcareProviderReleaseIndicator;
                                }
                                if (!string.IsNullOrEmpty(shrinqfPersonOrg3Item.mcs_personOrOrganizationIndicator))
                                {
                                    thisNewEntity["udo_personorg"] = shrinqfPersonOrg3Item.mcs_personOrOrganizationIndicator;
                                }
                                if (shrinqfPersonOrg3Item.mcs_eventDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg3Item.mcs_eventDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_eventdate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg3Item.mcs_endDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg3Item.mcs_endDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_enddate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg3Item.mcs_beginDate != string.Empty)
                                {
                                    thisNewEntity["udo_begindate"] = shrinqfPersonOrg3Item.mcs_beginDate;
                                }
                                if (shrinqfPersonOrg3Item.mcs_personOrgAttentionText != string.Empty)
                                {
                                    thisNewEntity["udo_attn"] = shrinqfPersonOrg3Item.mcs_personOrgAttentionText;
                                }
                                //not mapped thisNewEntity["udo_filenumber"]=??
                                //not mapped thisNewEntity["udo_current"]=??
                                if (request.UDOcreatePastFiduciariesRelatedEntitiesInfo != null)
                                {
                                    foreach (var relatedItem in request.UDOcreatePastFiduciariesRelatedEntitiesInfo)
                                    {
                                        thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                                    }
                                }

                                CreateRequest createData = new CreateRequest
                                {
                                    Target = thisNewEntity
                                };
                                requestCollection.Add(createData);
                            }

                            if (requestCollection.Count() > 0)
                            {
                                var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

                                if (_debug)
                                {
                                    LogBuffer += result.LogDetail;
                                    LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
                                }

                                if (result.IsFaulted)
                                {
                                    LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
                                    response.ExceptionMessage = result.FriendlyDetail;
                                    response.ExceptionOccured = true;
                                    return response;
                                }

                            }

                            #region Log Results
                            string logInfo = string.Format("Past Fiduciary Records Created: {0}", requestCollection.Count());
                            LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "Past Fiduciary Records Created", logInfo);

                            requestCollection.Clear();
                            #endregion
                        }
                    }
                    if (findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo != null)
                    {
                        System.Collections.Generic.List<UDOcreatePastPOAMultipleResponse> UDOcreatePastPOAArray = new System.Collections.Generic.List<UDOcreatePastPOAMultipleResponse>();
                        var shrinqfPersonOrg4 = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoapastPowerOfAttorneysclmsInfo;
                        if (shrinqfPersonOrg4 != null)
                        {
                            foreach (var shrinqfPersonOrg4Item in shrinqfPersonOrg4)
                            {
                                var responseIds = new UDOcreatePastPOAMultipleResponse();
                                //instantiate the new Entity
                                Entity thisNewEntity = new Entity();
                                thisNewEntity.LogicalName = "udo_pastpoa";
                                if (request.ownerId != System.Guid.Empty)
                                {
                                    thisNewEntity["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                                }
                                else
                                {
                                    LogHelper.LogError(request.OrganizationName, request.UserId, "Create POA", "No Owner");
                                }

                                if (shrinqfPersonOrg4Item.mcs_veteranPtcpntID != string.Empty)
                                {
                                    thisNewEntity["udo_vetptcpntid"] = shrinqfPersonOrg4Item.mcs_veteranPtcpntID;
                                }
                                if (shrinqfPersonOrg4Item.mcs_temporaryCustodianIndicator != string.Empty)
                                {
                                    thisNewEntity["udo_tempcustodian"] = shrinqfPersonOrg4Item.mcs_temporaryCustodianIndicator;
                                }
                                if (shrinqfPersonOrg4Item.mcs_statusCode != string.Empty)
                                {
                                    thisNewEntity["udo_status"] = shrinqfPersonOrg4Item.mcs_statusCode;
                                }
                                if (shrinqfPersonOrg4Item.mcs_relationshipName != string.Empty)
                                {
                                    thisNewEntity["udo_relationship"] = shrinqfPersonOrg4Item.mcs_relationshipName;
                                }
                                if (shrinqfPersonOrg4Item.mcs_rateName != string.Empty)
                                {
                                    thisNewEntity["udo_rate"] = shrinqfPersonOrg4Item.mcs_rateName;
                                }
                                if (shrinqfPersonOrg4Item.mcs_prepositionalPhraseName != string.Empty)
                                {
                                    thisNewEntity["udo_phase"] = shrinqfPersonOrg4Item.mcs_prepositionalPhraseName;
                                }
                                if (shrinqfPersonOrg4Item.mcs_personOrgPtcpntID != string.Empty)
                                {
                                    thisNewEntity["udo_personorgptcpnt"] = shrinqfPersonOrg4Item.mcs_personOrgPtcpntID;
                                }
                                if (shrinqfPersonOrg4Item.mcs_personOrganizationName != string.Empty)
                                {
                                    thisNewEntity["udo_personorgname"] = shrinqfPersonOrg4Item.mcs_personOrganizationName;
                                }
                                if (shrinqfPersonOrg4Item.mcs_personOrgName != string.Empty)
                                {
                                    thisNewEntity["udo_name"] = shrinqfPersonOrg4Item.mcs_personOrgName;
                                }
                                if (shrinqfPersonOrg4Item.mcs_personOrganizationCode != string.Empty)
                                {
                                    thisNewEntity["udo_personorg"] = shrinqfPersonOrg4Item.mcs_personOrganizationCode;
                                }
                                if (shrinqfPersonOrg4Item.mcs_journalUserID != string.Empty)
                                {
                                    thisNewEntity["udo_jrnuser"] = shrinqfPersonOrg4Item.mcs_journalUserID;
                                }
                                if (shrinqfPersonOrg4Item.mcs_journalStatusTypeCode != string.Empty)
                                {
                                    thisNewEntity["udo_jrnstatus"] = shrinqfPersonOrg4Item.mcs_journalStatusTypeCode;
                                }
                                if (shrinqfPersonOrg4Item.mcs_journalObjectID != string.Empty)
                                {
                                    thisNewEntity["udo_jrnobj"] = shrinqfPersonOrg4Item.mcs_journalObjectID;
                                }
                                if (shrinqfPersonOrg4Item.mcs_journalLocationID != string.Empty)
                                {
                                    thisNewEntity["udo_jrnloc"] = shrinqfPersonOrg4Item.mcs_journalLocationID;
                                }
                                if (shrinqfPersonOrg4Item.mcs_journalDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg4Item.mcs_journalDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_jrndate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg4Item.mcs_healthcareProviderReleaseIndicator != string.Empty)
                                {
                                    thisNewEntity["udo_hcproviderrelease"] = shrinqfPersonOrg4Item.mcs_healthcareProviderReleaseIndicator;
                                }
                                if (shrinqfPersonOrg4Item.mcs_eventDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg4Item.mcs_eventDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_eventdate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg4Item.mcs_endDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg4Item.mcs_endDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_enddate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg4Item.mcs_beginDate != string.Empty)
                                {
                                    DateTime newDateTime;
                                    if (DateTime.TryParse(shrinqfPersonOrg4Item.mcs_beginDate, out newDateTime))
                                    {
                                        thisNewEntity["udo_begindate"] = newDateTime;
                                    }
                                }
                                if (shrinqfPersonOrg4Item.mcs_personOrgAttentionText != string.Empty)
                                {
                                    thisNewEntity["udo_attn"] = shrinqfPersonOrg4Item.mcs_personOrgAttentionText;
                                }
                                //not mapped thisNewEntity["udo_veteranid"]=??
                                //not mapped thisNewEntity["udo_cd"]=??
                                if (request.UDOcreatePastFiduciariesRelatedEntitiesInfo != null)
                                {
                                    foreach (var relatedItem in request.UDOcreatePastFiduciariesRelatedEntitiesInfo)
                                    {
                                        thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                                    }
                                }

                                CreateRequest createData = new CreateRequest
                                {
                                    Target = thisNewEntity
                                };
                                requestCollection.Add(createData);

                            }

                            if (requestCollection.Count() > 0)
                            {
                                var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

                                if (_debug)
                                {
                                    LogBuffer += result.LogDetail;
                                    LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
                                }

                                if (result.IsFaulted)
                                {
                                    LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
                                    response.ExceptionMessage = result.FriendlyDetail;
                                    response.ExceptionOccured = true;
                                    return response;
                                }

                                string logInfo = string.Format("Past POA Records Created: {0}", requestCollection.Count());
                                LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "Past POA Records Created", logInfo);
                            }
                        }
                    }
                }

                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "UDOcreatePastFiduciariesProcessor Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to Map EC data to LOB";
                response.ExceptionOccured = true;
                return response;
            }
        }
    }
}
