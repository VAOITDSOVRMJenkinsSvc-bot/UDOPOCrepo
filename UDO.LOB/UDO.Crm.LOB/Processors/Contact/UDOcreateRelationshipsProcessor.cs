using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Linq;
using VIMT.ClaimantWebService.Messages;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using VRM.Integration.UDO.Common;
using VRM.Integration.UDO.Contact.Messages;

/// <summary>
/// VIMT LOB Component for UDOcreateRelationships,createRelationships method, Processor.
/// Code Generated by IMS on: 5/8/2015 2:30:16 PM
/// Version: 2015.05.05
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Contact.Processors
{
    class UDOcreateRelationshipsProcessor
    {
        private bool _debug { get; set; }
        private const string method = "UDOcreateRelationshipsProcessor";
        private string LogBuffer { get; set; }

        public IMessageBase Execute(UDOcreateRelationshipsRequest request)
        {
            //var request = message as createRelationshipsRequest;
            UDOcreateRelationshipsResponse response = new UDOcreateRelationshipsResponse();
            var progressString = "Top of Processor";
            LogBuffer = string.Empty;
            _debug = request.Debug;

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

           

            OrganizationServiceProxy OrgServiceProxy;

            #region connect to CRM
            try
            {
                var CommonFunctions = new CRMConnect();

                OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, "UDOcreateRelationshipsProcessor Processor, Connection Error", connectException.Message);                
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            var requestCollection = new OrganizationRequestCollection();

            //try
            //{
            //    QueryByAttribute querybyexpression = new QueryByAttribute("udo_relationships");
            //    querybyexpression.ColumnSet = new ColumnSet("udo_relationshipsid");

            //    if (request.DependentId == Guid.Empty)
            //    {
            //        querybyexpression.Attributes.AddRange("udo_veteranid");

            //        //  Value of queried attribute to return    
            //        querybyexpression.Values.AddRange(request.VeteranId);
            //    }
            //    else
            //    {
            //        querybyexpression.Attributes.AddRange("udo_dependentid");

            //        //  Value of queried attribute to return    
            //        querybyexpression.Values.AddRange(request.DependentId);
            //    }
            //    //  Query passed to the service proxy    
            //    EntityCollection retrieved = OrgServiceProxy.RetrieveMultiple(querybyexpression);

            //    //  Iterate through returned collection 
            //    var deleteCount = 0;
            //    foreach (var c in retrieved.Entities)
            //    {
            //        DeleteRequest deleteRequest = new DeleteRequest
            //        {
            //            Target = new EntityReference("udo_relationships", c.Id)
            //        };
            //        requestCollection.Add(deleteRequest);
            //        deleteCount += 1;
            //    }

            //    if (deleteCount > 0)
            //    {
            //        var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

            //        if (_debug)
            //        {
            //            LogBuffer += result.LogDetail;
            //            LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
            //        }

            //        if (result.IsFaulted)
            //        {
            //            LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
            //            response.ExceptionMessage = result.FriendlyDetail;
            //            response.ExceptionOccured = true;
            //            return response;
            //        }
            //    }
            //    requestCollection.Clear();

            //    string logInfo = string.Format("Relationship Records Deleted: {0}", deleteCount);
            //    LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "Relationship Records Deleted", logInfo);
            //}
            //catch (Exception ExecutionException)
            //{
            //    LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "UDOcreateRelationshipsRecordsProcessor Processor, Progess:" + progressString, ExecutionException);
            //    response.ExceptionMessage = "Failed to Delete Old Relationships";
            //    response.ExceptionOccured = true;
            //    return response;
            //}

            progressString = "After CRM Connection, beginning new request.";

            try
            {
                // prefix = fallrelfindAllRelationshipsRequest();
                var findAllRelationshipsRequest = new VIMTfallrelfindAllRelationshipsRequest();
                findAllRelationshipsRequest.LogTiming = request.LogTiming;
                findAllRelationshipsRequest.LogSoap = request.LogSoap;
                findAllRelationshipsRequest.Debug = request.Debug;
                findAllRelationshipsRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findAllRelationshipsRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findAllRelationshipsRequest.RelatedParentId = request.RelatedParentId;
                findAllRelationshipsRequest.UserId = request.UserId;
                findAllRelationshipsRequest.OrganizationName = request.OrganizationName;

                findAllRelationshipsRequest.mcs_ptcpntid = request.ptcpntId;
                if (request.LegacyServiceHeaderInfo != null)
                {
                    findAllRelationshipsRequest.LegacyServiceHeaderInfo = new VIMT.ClaimantWebService.Messages.HeaderInfo
                    {
                        ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                        ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                        LoginName = request.LegacyServiceHeaderInfo.LoginName,
                        StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                    };
                }
                // TODO(TN): Comment to remediate
                var findAllRelationshipsResponse = findAllRelationshipsRequest.SendReceive<VIMTfallrelfindAllRelationshipsResponse>(MessageProcessType.Local);
                progressString = "After VIMT EC Call";
                requestCollection = new OrganizationRequestCollection();

                response.ExceptionMessage = findAllRelationshipsResponse.ExceptionMessage;
                response.ExceptionOccured = findAllRelationshipsResponse.ExceptionOccured;
                if (findAllRelationshipsResponse.VIMTfallrelreturnclmsInfo != null)
                {
                    var shrinq6Person = findAllRelationshipsResponse.VIMTfallrelreturnclmsInfo.VIMTfallreldependentsclmsInfo;
                    System.Collections.Generic.List<UDOcreateRelationshipsMultipleResponse> UDOcreateRelationshipsArray = new System.Collections.Generic.List<UDOcreateRelationshipsMultipleResponse>();
                    if (shrinq6Person != null)
                    {
                        foreach (var shrinq6PersonItem in shrinq6Person)
                        {
                            var responseIds = new UDOcreateRelationshipsMultipleResponse();
                            //instantiate the new Entity
                            Entity thisNewEntity = new Entity();
                            thisNewEntity.LogicalName = "udo_relationships";
                            thisNewEntity["udo_name"] = "Relationship Summary";
                            if (request.ownerId != System.Guid.Empty)
                            {
                                thisNewEntity["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                            }
                            else
                            {
                                LogHelper.LogError(request.OrganizationName, request.UserId, "Create Relationships", "No Owner");
                            }
                            if (shrinq6PersonItem.mcs_terminateReason != string.Empty)
                            {
                                thisNewEntity["udo_terminatereason"] = shrinq6PersonItem.mcs_terminateReason;
                            }
                            if (shrinq6PersonItem.mcs_ssnVerifiedInd != string.Empty)
                            {
                                thisNewEntity["udo_ssnverifiedstatus"] = shrinq6PersonItem.mcs_ssnVerifiedInd;
                            }
                            if (shrinq6PersonItem.mcs_ssn != string.Empty)
                            {
                                thisNewEntity["udo_ssn"] = shrinq6PersonItem.mcs_ssn;
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_awardInd))
                            {
                                thisNewEntity["udo_awardind"] = shrinq6PersonItem.mcs_awardInd;
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_relationshipEndDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_relationshipEndDate), out newDateTime))
                                {
                                    thisNewEntity["udo_relationshipenddate"] = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_relationshipBeginDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_relationshipBeginDate), out newDateTime))
                                {
                                    thisNewEntity["udo_relationshipbegindate"] = newDateTime;
                                }
                            }
                            if (shrinq6PersonItem.mcs_relationshipType != string.Empty)
                            {
                                thisNewEntity["udo_relationship"] = shrinq6PersonItem.mcs_relationshipType;
                            }
                            if (shrinq6PersonItem.mcs_ptcpntId != string.Empty)
                            {
                                thisNewEntity["udo_ptcpntid"] = shrinq6PersonItem.mcs_ptcpntId;
                            }
                            if (shrinq6PersonItem.mcs_proofOfDependecyInd != string.Empty)
                            {
                                thisNewEntity["udo_proofofdependency"] = shrinq6PersonItem.mcs_proofOfDependecyInd;
                            }
                            if (shrinq6PersonItem.mcs_poa != string.Empty)
                            {
                                thisNewEntity["udo_poa"] = shrinq6PersonItem.mcs_poa;
                            }
                            if (shrinq6PersonItem.mcs_gender != string.Empty)
                            {
                                thisNewEntity["udo_gender"] = shrinq6PersonItem.mcs_gender;
                            }
                            if (shrinq6PersonItem.mcs_fileNumber != string.Empty)
                            {
                                thisNewEntity["udo_filenumber"] = shrinq6PersonItem.mcs_fileNumber;
                            }
                            if (shrinq6PersonItem.mcs_fiduciary != string.Empty)
                            {
                                thisNewEntity["udo_fiduciary"] = shrinq6PersonItem.mcs_fiduciary;
                            }
                            if (shrinq6PersonItem.mcs_emailAddress != string.Empty)
                            {
                                thisNewEntity["udo_email"] = shrinq6PersonItem.mcs_emailAddress;
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_dateOfDeath))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_dateOfDeath), out newDateTime))
                                {
                                    thisNewEntity["udo_dod"] = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_dateOfBirth))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_dateOfBirth), out newDateTime))
                                {
                                    thisNewEntity["udo_dob"] = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_dependentTerminateDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_dependentTerminateDate), out newDateTime))
                                {
                                    thisNewEntity["udo_dependentterminatedate"] = newDateTime;
                                }
                            }
                            if (shrinq6PersonItem.mcs_dependentReason != string.Empty)
                            {
                                thisNewEntity["udo_dependantreason"] = shrinq6PersonItem.mcs_dependentReason;
                            }
                            if (shrinq6PersonItem.mcs_awardType != string.Empty)
                            {
                                thisNewEntity["udo_awardtype"] = shrinq6PersonItem.mcs_awardType;
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_awardEndDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_awardEndDate), out newDateTime))
                                {
                                    thisNewEntity["udo_awardenddate"] = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(shrinq6PersonItem.mcs_awardBeginDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(shrinq6PersonItem.mcs_awardBeginDate), out newDateTime))
                                {
                                    thisNewEntity["udo_awardbegindate"] = newDateTime;
                                }
                            }
                            var fullname = shrinq6PersonItem.mcs_firstName + " " + shrinq6PersonItem.mcs_middleName + " " + shrinq6PersonItem.mcs_lastName;
                            thisNewEntity["udo_fullname"] = fullname;
                            if (request.UDOcreateRelationshipsRelatedEntitiesInfo != null)
                            {
                                foreach (var relatedItem in request.UDOcreateRelationshipsRelatedEntitiesInfo)
                                {
                                    thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                                }
                            }

                            CreateRequest createData = new CreateRequest
                            {
                                Target = thisNewEntity
                            };
                            requestCollection.Add(createData);

                        }

                        if (requestCollection.Count() > 0)
                        {
                            var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

                            if (_debug)
                            {
                                LogBuffer += result.LogDetail;
                                LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
                            }

                            if (result.IsFaulted)
                            {
                                LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
                                response.ExceptionMessage = result.FriendlyDetail;
                                response.ExceptionOccured = true;
                                return response;
                            }
                        }

                        #region Log Results
                        string logInfo = string.Format("Relationship Records Created: {0}", requestCollection.Count());
                        LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "Relationship Records Created", logInfo);
                        #endregion
                    }
                }

                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "UDOcreateRelationshipsProcessor Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to Map EC data to LOB";
                response.ExceptionOccured = true;
                return response;
            }
        }

        private static string dateStringFormat(string date)
        {
            if (date == null) return null;
            if (date.Length == 10) return date;
            if (date.Length < 8) return date;

            date = date.Insert(2, "/");
            date = date.Insert(5, "/");
            return date;
        }
    }
}
