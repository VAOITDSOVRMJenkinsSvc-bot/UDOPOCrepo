// using CRM007.CRM.SDK.Core;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using VIMT.ClaimantWebService.Messages;
using VIMT.EBenefitsAccountActivity.Messages;
using VIMT.VeteranWebService.Messages;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using VRM.Integration.UDO.Common;
using VRM.Integration.UDO.Contact.Messages;
using Logger = VRM.Integration.Servicebus.Core.Logger;

/// <summary>
/// VIMT LOB Component for UDOgetContactRecords,getContactRecords method, Processor.
/// Code Generated by IMS on: 5/8/2015 4:07:11 PM
/// Version: 2015.05.05
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Contact.Processors
{
    class UDOgetContactRecordsProcessor
    {
        private bool _debug { get; set; }
        private const string method = "UDOgetContactRecordsProcessor";
        private string LogBuffer { get; set; }

        public IMessageBase Execute(UDOgetContactRecordsRequest request)
        {
            Stopwatch txnTimer = Stopwatch.StartNew();
            //var request = message as getContactRecordsRequest;
            UDOgetContactRecordsResponse response = new UDOgetContactRecordsResponse();
            var progressString = "Top of Processor";
            LogBuffer = string.Empty;
            _debug = request.Debug;

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            OrganizationServiceProxy OrgServiceProxy;
            #region connect to CRM
            Stopwatch txnTimerconn = Stopwatch.StartNew();
            try
            {
               
                var CommonFunctions = new CRMConnect();

                OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, "UDOCreatePersonProcessor Processor, Connection Error", connectException.Message);                
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            txnTimerconn.Stop();
            
            LogHelper.LogTiming(request.OrganizationName,request.Debug, request.UserId, Guid.Empty, null, null,"Contact Connect",null, txnTimerconn.ElapsedMilliseconds);   
            progressString = "After Connection";

            try
            {

                response.UDOgetContactRecordsInfo = new UDOgetContactRecords();
                Task[] taskArray = {
                                       //Task.Factory.StartNew(() =>  progressString = getFlashes(request, response, progressString)),
                    Task.Factory.StartNew(() =>  progressString = getCorpData(request, response, progressString)),
                    Task.Factory.StartNew(() =>  progressString = getEBenefitsData(request, response, progressString)),
                    Task.Factory.StartNew(() =>  progressString = getBirlsData(request, response, ref progressString)),
                   Task.Factory.StartNew(() =>   progressString = getPOAFIDData(request, response, progressString))
                   
                                   };

                Task.WaitAll(taskArray);
                
                txnTimer.Stop();

                LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact LOB", null, txnTimer.ElapsedMilliseconds);

                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "RELEASED_ACTIVE_DUTY_DATE out the door:" + response.UDOgetContactRecordsInfo.udo_activeReleaseDate);

                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to process contact related records";
                response.ExceptionOccured = true;
                return response;
            }
        }

        private static string getFlashes(UDOgetContactRecordsRequest request, UDOgetContactRecordsResponse response, string progressString)
        {
            try
            {

                DateTime myNow = DateTime.Now;
                var extendedTIWEnd = myNow.Hour.ToString("00") + ":" + myNow.Minute.ToString("00") + ":" + myNow.Second.ToString("00") + ":" + myNow.Millisecond.ToString("000");
                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "getFlashes ", extendedTIWEnd + " starting");

                Stopwatch txnTimerconn = Stopwatch.StartNew();

                // prefix = fflfindFlashesRequest();
                var findFlashesRequest = new VIMTfgenpidfindGeneralInformationByPtcpntIdsRequest();
                findFlashesRequest.LogTiming = request.LogTiming;
                findFlashesRequest.LogSoap = request.LogSoap;
                findFlashesRequest.Debug = request.Debug;
                findFlashesRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findFlashesRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findFlashesRequest.RelatedParentId = request.RelatedParentId;
                findFlashesRequest.UserId = request.UserId;
                findFlashesRequest.OrganizationName = request.OrganizationName;
                if (request.LegacyServiceHeaderInfo != null)
                {
                    findFlashesRequest.LegacyServiceHeaderInfo = new VIMT.ClaimantWebService.Messages.HeaderInfo
                    {
                        ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                        ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                        LoginName = request.LegacyServiceHeaderInfo.LoginName,
                        StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                    };
                }
                //findFlashesRequest.mcs_filenumber = request.fileNumber;
                findFlashesRequest.mcs_ptcpntvetid = request.ptcpntVetId;
                findFlashesRequest.mcs_ptcpntbeneid = request.ptcpntBeneId;
                findFlashesRequest.mcs_ptpcntrecipid = request.ptpcntRecipId;
                //findFlashesRequest.mcs_awardtypecd = request.awardTypeCd;

                return progressString;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "getFlashes Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to getFlashes";
                response.ExceptionOccured = true;
                return progressString;
            }
        }

        private static string getPOAFIDData(UDOgetContactRecordsRequest request, UDOgetContactRecordsResponse response, string progressString)
        {
            try
            {

                DateTime myNow = DateTime.Now;
                var extendedTIWEnd = myNow.Hour.ToString("00") + ":" + myNow.Minute.ToString("00") + ":" + myNow.Second.ToString("00") + ":" + myNow.Millisecond.ToString("000");

                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "getPOAFIDData ", extendedTIWEnd + " starting");
                Stopwatch txnTimerconn = Stopwatch.StartNew();

                 //if this doesn't contain anything, don't go asking for it!
                if (!string.IsNullOrEmpty(request.fileNumber))
                {
                    var findAllFiduciaryPoaRequest = new VIMTafidpoafindAllFiduciaryPoaRequest();
                    findAllFiduciaryPoaRequest.LogTiming = request.LogTiming;
                    findAllFiduciaryPoaRequest.LogSoap = request.LogSoap;
                    findAllFiduciaryPoaRequest.Debug = request.Debug;
                    findAllFiduciaryPoaRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                    findAllFiduciaryPoaRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                    findAllFiduciaryPoaRequest.RelatedParentId = request.RelatedParentId;
                    findAllFiduciaryPoaRequest.UserId = request.UserId;
                    findAllFiduciaryPoaRequest.OrganizationName = request.OrganizationName;

                    //non standard fields
                    findAllFiduciaryPoaRequest.mcs_filenumber = request.fileNumber;
                    if (request.LegacyServiceHeaderInfo != null)
                    {
                        findAllFiduciaryPoaRequest.LegacyServiceHeaderInfo = new VIMT.ClaimantWebService.Messages.HeaderInfo
                        {
                            ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                            ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                            LoginName = request.LegacyServiceHeaderInfo.LoginName,
                            StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                        };
                    }
                    // TODO(TN): Comment to remediate
                    var findAllFiduciaryPoaResponse = findAllFiduciaryPoaRequest.SendReceive<VIMTafidpoafindAllFiduciaryPoaResponse>(MessageProcessType.Local);
                    progressString = "After VIMT EC Call";
                    LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Back from findfidpoa", null, txnTimerconn.ElapsedMilliseconds);

                    response.ExceptionMessage = findAllFiduciaryPoaResponse.ExceptionMessage;
                    response.ExceptionOccured = findAllFiduciaryPoaResponse.ExceptionOccured;
                    if (findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo != null)
                    {
                        var currentFiduciary = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentFiduciaryclmsInfo;
                        if (currentFiduciary != null)
                        {
                            #region map current FID data
                            
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrgName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfid2PersonOrgName =
                                response.UDOgetContactRecordsInfo.udo_FiduciaryAppointed = 
                                currentFiduciary.mcs_personOrgName.TrimWhiteSpace();
                             
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_prepositionalPhraseName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidPrepositionalPhrase = currentFiduciary.mcs_prepositionalPhraseName;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrganizationName))
                            {
                                response.UDOgetContactRecordsInfo.udo_personOrganizationName = currentFiduciary.mcs_personOrganizationName.TrimWhiteSpace();
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_beginDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(currentFiduciary.mcs_beginDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidBeginDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_endDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(currentFiduciary.mcs_endDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidEndDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_eventDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(currentFiduciary.mcs_eventDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidEventDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_healthcareProviderReleaseIndicator))
                            {
                                // trying to map string to a boolean response.UDOgetContactRecordsInfo.udo_cfidHCProviderRelease = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentFiduciaryclmsInfo.mcs_healthcareProviderReleaseIndicator;
                                //Valide N is correct for this IND field
                                var thisValue = currentFiduciary.mcs_healthcareProviderReleaseIndicator;
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "VIMTafidpoacurrentFiduciaryclmsInfo.mcs_healthcareProviderReleaseIndicator:" + thisValue);

                                if (thisValue == "N")
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidHCProviderRelease = false;
                                }
                                else
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidHCProviderRelease = true;
                                }
                                response.UDOgetContactRecordsInfo.udo_cfidHCProviderReleaseSpecified = true;

                            }
                            else
                            {
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentFiduciaryclmsInfo.mcs_healthcareProviderReleaseIndicator is null or empty");
                            }

                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_journalDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(currentFiduciary.mcs_journalDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidJrnDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_journalLocationID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidJrnLocID = currentFiduciary.mcs_journalLocationID;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_journalObjectID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidJrnObjID = currentFiduciary.mcs_journalObjectID;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_journalStatusTypeCode))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidJrnStatusType = currentFiduciary.mcs_journalStatusTypeCode;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrgAttentionText))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidPersonOrgAttn = currentFiduciary.mcs_personOrgAttentionText;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrganizationCode))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidPersonOrgCode = currentFiduciary.mcs_personOrganizationCode;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrgName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidPersonOrgName = currentFiduciary.mcs_personOrgName.TrimWhiteSpace();
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrgPtcpntID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidPersonOrgParticipantID = currentFiduciary.mcs_personOrgPtcpntID;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_personOrOrganizationIndicator))
                            {
                                // trying to map string to a boolean response.UDOgetContactRecordsInfo.udo_cfidPersonorOrg = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentFiduciaryclmsInfo.mcs_personOrOrganizationIndicator;
                                //Valide N is correct for this IND field
                                var thisValue = currentFiduciary.mcs_personOrOrganizationIndicator;
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "VIMTafidpoacurrentFiduciaryclmsInfo.mcs_personOrOrganizationIndicator:" + thisValue);

                                if (thisValue == "O")
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidPersonorOrg = false;
                                }
                                else
                                {
                                    response.UDOgetContactRecordsInfo.udo_cfidPersonorOrg = true;
                                }
                                response.UDOgetContactRecordsInfo.udo_cfidPersonorOrgSpecified = true;
                            }
                            else
                            {
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "VIMTafidpoacurrentFiduciaryclmsInfo.mcs_personOrOrganizationIndicator is null or empty");
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_rateName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidRateName = currentFiduciary.mcs_rateName;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_relationshipName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidRelationship = currentFiduciary.mcs_relationshipName;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_statusCode))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidStatus = currentFiduciary.mcs_statusCode;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_temporaryCustodianIndicator))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidTempCustodian = currentFiduciary.mcs_temporaryCustodianIndicator;
                            }
                            if (!string.IsNullOrEmpty(currentFiduciary.mcs_veteranPtcpntID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cfidVetPtcpntID = currentFiduciary.mcs_veteranPtcpntID;
                            }
                            #endregion
                        }
                        else
                        {
                            //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "no fid found");
                        }
                        LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Done with FID", null, txnTimerconn.ElapsedMilliseconds);

                        if (findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo != null)
                        {
                            #region map current POA data

                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_beginDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_beginDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaBeginDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_endDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_endDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaEndDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_eventDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_eventDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaEventDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_healthcareProviderReleaseIndicator))
                            {
                                // trying to map string to a boolean response.UDOgetContactRecordsInfo.udo_cpoaHCProviderRelease = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_healthcareProviderReleaseIndicator;
                                //Valide N is correct for this IND field
                                var thisValue = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_healthcareProviderReleaseIndicator;
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_healthcareProviderReleaseIndicator:" + findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_healthcareProviderReleaseIndicator);
                                if (thisValue == "N")
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaHCProviderRelease = false;
                                }
                                else
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaHCProviderRelease = true;
                                }
                                response.UDOgetContactRecordsInfo.udo_cpoaHCProviderReleaseSpecified = true;
                            }
                            else
                            {
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_healthcareProviderReleaseIndicator is null or empty");
                            }

                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalDate))
                            {
                                DateTime newDateTime;
                                if (DateTime.TryParse(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalDate, out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaJrnDate = newDateTime;
                                }
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalLocationID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaJrnLocID = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalLocationID;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalObjectID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaJrnObjID = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalObjectID;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalStatusTypeCode))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaJrnStatusType = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalStatusTypeCode;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalUserID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaJrnUserID = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_journalUserID;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaOrgPersonName = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgName;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgAttentionText))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaPersonOrgAttn = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgAttentionText;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrganizationCode))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaPersonOrgCode = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrganizationCode;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrganizationName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaPersonOrgName = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrganizationName;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgPtcpntID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaPersonOrgParticipantID = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgPtcpntID;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrOrganizationIndicator))
                            {
                                // trying to map string to a boolean response.UDOgetContactRecordsInfo.udo_cpoaPersonOrOrg = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrOrganizationIndicator;
                                //Valide N is correct for this IND field
                                var thisValue = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrOrganizationIndicator;
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrOrganizationIndicator:" + findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrOrganizationIndicator);

                                if (thisValue == "O")
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaPersonOrOrg = false;
                                }
                                else
                                {
                                    response.UDOgetContactRecordsInfo.udo_cpoaPersonOrOrg = true;
                                }
                                response.UDOgetContactRecordsInfo.udo_cpoaPersonOrOrgSpecified = true;
                            }
                            else
                            {
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrOrganizationIndicator is null or empty");
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_prepositionalPhraseName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaPrepositionalPhrase = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_prepositionalPhraseName;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_rateName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaRateName = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_rateName;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_relationshipName))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaRelationship = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_relationshipName;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_statusCode))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaStatus = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_statusCode;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_temporaryCustodianIndicator))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaTempCustodian = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_temporaryCustodianIndicator;
                            }
                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_veteranPtcpntID))
                            {
                                response.UDOgetContactRecordsInfo.udo_cpoaVetPtcptID = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_veteranPtcpntID;
                            }

                            if (!string.IsNullOrEmpty(findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgName))
                            {
                                response.UDOgetContactRecordsInfo.udo_POA = findAllFiduciaryPoaResponse.VIMTafidpoareturnclmsInfo.VIMTafidpoacurrentPowerOfAttorneyclmsInfo.mcs_personOrgName;
                            }
                            #endregion
                            // UDOgetContactRecordsArray.Add(responseIds);
                        }
                        else
                        {
                            //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "no poa found");
                        }
                        LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Done with POA", null, txnTimerconn.ElapsedMilliseconds);
                    }
                    else
                    {
                        //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor Processor, Progess:" + progressString, "no fidpoarecords");
                    }
                    txnTimerconn.Stop();

                    LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:fidData", null, txnTimerconn.ElapsedMilliseconds);
                }
                return progressString;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "get POAFIDData Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to get POAFIDDATA";
                response.ExceptionOccured = true;
                return progressString;
            }
        }

        private static string getBirlsData(UDOgetContactRecordsRequest request, UDOgetContactRecordsResponse response, ref string progressString)
        {
            try
            {


                DateTime myNow = DateTime.Now;
                var extendedTIWEnd = myNow.Hour.ToString("00") + ":" + myNow.Minute.ToString("00") + ":" + myNow.Second.ToString("00") + ":" + myNow.Millisecond.ToString("000");

                Stopwatch txnTimerconn = Stopwatch.StartNew();
                var findBirlsRecordByFileNumberRequest = new VIMTbrlsFNfindBirlsRecordByFileNumberRequest();
                findBirlsRecordByFileNumberRequest.LogTiming = request.LogTiming;
                findBirlsRecordByFileNumberRequest.LogSoap = request.LogSoap;
                findBirlsRecordByFileNumberRequest.Debug = request.Debug;
                findBirlsRecordByFileNumberRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findBirlsRecordByFileNumberRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findBirlsRecordByFileNumberRequest.RelatedParentId = request.RelatedParentId;
                findBirlsRecordByFileNumberRequest.UserId = request.UserId;
                findBirlsRecordByFileNumberRequest.OrganizationName = request.OrganizationName;

                //non standard fields
                findBirlsRecordByFileNumberRequest.mcs_filenumber = request.fileNumber;
                if (request.LegacyServiceHeaderInfo != null)
                {
                    findBirlsRecordByFileNumberRequest.LegacyServiceHeaderInfo = new VIMT.VeteranWebService.Messages.HeaderInfo
                    {
                        ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                        ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                        LoginName = request.LegacyServiceHeaderInfo.LoginName,
                        StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                    };
                }

                // TODO(TN): Comment to remediate
                var findBirlsRecordByFileNumberResponse = findBirlsRecordByFileNumberRequest.SendReceive<VIMTbrlsFNfindBirlsRecordByFileNumberResponse>(MessageProcessType.Local);
                LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Done with findbirls", null, txnTimerconn.ElapsedMilliseconds);
                progressString = "After VIMT EC Call";

                response.ExceptionMessage = findBirlsRecordByFileNumberResponse.ExceptionMessage;
                response.ExceptionOccured = findBirlsRecordByFileNumberResponse.ExceptionOccured;
                if (findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo != null)
                {
                    var birlsRecord = findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo;
                    if (!string.IsNullOrEmpty(findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_CAUSE_OF_DEATH))
                    {
                        response.UDOgetContactRecordsInfo.udo_CauseofDeath = findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_CAUSE_OF_DEATH;
                    }
                    if (!string.IsNullOrEmpty(findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_SEX_CODE))
                    {
                        response.UDOgetContactRecordsInfo.udo_gender = findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_SEX_CODE;
                    }
                    if (!string.IsNullOrEmpty(findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_DATE_OF_DEATH))
                    {
                        response.UDOgetContactRecordsInfo.udo_DateofDeath = findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_DATE_OF_DEATH;
                    }
                    if (!string.IsNullOrEmpty(findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_CLAIM_FOLDER_LOCATION))
                    {
                        response.UDOgetContactRecordsInfo.udo_FolderLocation = findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.mcs_CLAIM_FOLDER_LOCATION;
                    }
                    if (findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.VIMTbrlsFNSERVICEInfo != null)
                    {
                        //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "Top of Service Data");
                        var serviceDTO = findBirlsRecordByFileNumberResponse.VIMTbrlsFNreturnInfo.VIMTbrlsFNSERVICEInfo;
                        foreach (var item in serviceDTO)
                        {
                            if (!string.IsNullOrEmpty(item.mcs_BRANCH_OF_SERVICE))
                            {
                                response.UDOgetContactRecordsInfo.udo_BranchOfService = LongBranchOfService(item.mcs_BRANCH_OF_SERVICE);
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "item.mcs_BRANCH_OF_SERVICE:" + item.mcs_BRANCH_OF_SERVICE);
                            }

                            if (!string.IsNullOrEmpty(item.mcs_CHAR_OF_SVC_CODE))
                            {
                                response.UDOgetContactRecordsInfo.udo_charofdisccode = item.mcs_CHAR_OF_SVC_CODE;
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "item.mcs_CHAR_OF_SVC_CODE:" + item.mcs_CHAR_OF_SVC_CODE);
                            }

                            //var LatestServiceItem = serviceDTO.OrderByDescending(h => h.mcs_ENTERED_ON_DUTY_DATE).FirstOrDefault();
                            //if (!string.IsNullOrEmpty(LatestServiceItem.mcs_BRANCH_OF_SERVICE))
                            //{
                            //    //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "mcs_BRANCH_OF_SERVICE:" + LatestServiceItem.mcs_BRANCH_OF_SERVICE);
                            //    response.UDOgetContactRecordsInfo.udo_BranchOfService = LongBranchOfService(LatestServiceItem.mcs_BRANCH_OF_SERVICE);
                            //    //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "udo_BranchOfService" + response.UDOgetContactRecordsInfo.udo_BranchOfService);
                            //}
                            if (!string.IsNullOrEmpty(item.mcs_RELEASED_ACTIVE_DUTY_DATE))
                            {
                                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "RELEASED_ACTIVE_DUTY_DATE:" + LatestServiceItem.mcs_RELEASED_ACTIVE_DUTY_DATE);

                                DateTime newDateTime;
                                if (DateTime.TryParse(dateStringFormat(item.mcs_RELEASED_ACTIVE_DUTY_DATE), out newDateTime))
                                {
                                    response.UDOgetContactRecordsInfo.udo_activeReleaseDate = newDateTime;
                                }

                            }
                        }
                    }
                    else
                    {
                        var findVeteranRequest = new VIMTfvetfindVeteranRequest();
                        findVeteranRequest.LogTiming = request.LogTiming;
                        findVeteranRequest.LogSoap = request.LogSoap;
                        findVeteranRequest.Debug = request.Debug;
                        findVeteranRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                        findVeteranRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                        findVeteranRequest.RelatedParentId = request.RelatedParentId;
                        findVeteranRequest.UserId = request.UserId;
                        findVeteranRequest.OrganizationName = request.OrganizationName;
                        findVeteranRequest.LegacyServiceHeaderInfo = new VIMT.VeteranWebService.Messages.HeaderInfo
                        {
                            ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                            ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                            LoginName = request.LegacyServiceHeaderInfo.LoginName,
                            StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                        };
                        if (!string.IsNullOrEmpty(request.vetsoc))
                        {
                            findVeteranRequest.veteranrecordinputInfo = new VIMTfvetveteranrecordinput
                            {
                                mcs_ssn = request.vetsoc
                            };
                        }
                        else
                        {
                            findVeteranRequest.veteranrecordinputInfo = new VIMTfvetveteranrecordinput
                            {
                                mcs_fileNumber = request.fileNumber
                            };
                        }
                        //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor, Execute", "Trying to call VIMTfvetfindVeteranResponse");
                        // TODO(TN): Comment to remediate
                        var findVeteranResponse = findVeteranRequest.SendReceive<VIMTfvetfindVeteranResponse>(MessageProcessType.Local);
                        if (findVeteranResponse.VIMTfvetreturnInfo != null)
                        {
                            if (findVeteranResponse.VIMTfvetreturnInfo.VIMTfvetvetBirlsRecordInfo != null)
                            {
                                if (findVeteranResponse.VIMTfvetreturnInfo.VIMTfvetvetBirlsRecordInfo.VIMTfvetSERVICEInfo != null)
                                {
                                    //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "Top of Service Data in findVeteran");
                                    var serviceDTO = findVeteranResponse.VIMTfvetreturnInfo.VIMTfvetvetBirlsRecordInfo.VIMTfvetSERVICEInfo;
                                    foreach (var item in serviceDTO)
                                    {
                                        if (!string.IsNullOrEmpty(item.mcs_BRANCH_OF_SERVICE))
                                        {
                                            response.UDOgetContactRecordsInfo.udo_BranchOfService = LongBranchOfService(item.mcs_BRANCH_OF_SERVICE);
                                            //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "item.mcs_BRANCH_OF_SERVICE:" + item.mcs_BRANCH_OF_SERVICE);
                                        }

                                        if (!string.IsNullOrEmpty(item.mcs_CHAR_OF_SVC_CODE))
                                        {
                                            response.UDOgetContactRecordsInfo.udo_charofdisccode = item.mcs_CHAR_OF_SVC_CODE;
                                           //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "item.mcs_CHAR_OF_SVC_CODE:" + item.mcs_CHAR_OF_SVC_CODE);
                                        }

                                        //var LatestServiceItem = serviceDTO.OrderByDescending(h => h.mcs_ENTERED_ON_DUTY_DATE).FirstOrDefault();
                                        //if (!string.IsNullOrEmpty(LatestServiceItem.mcs_BRANCH_OF_SERVICE))
                                        //{
                                        //    //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "mcs_BRANCH_OF_SERVICE:" + LatestServiceItem.mcs_BRANCH_OF_SERVICE);
                                        //    response.UDOgetContactRecordsInfo.udo_BranchOfService = LongBranchOfService(LatestServiceItem.mcs_BRANCH_OF_SERVICE);
                                        //    //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "udo_BranchOfService" + response.UDOgetContactRecordsInfo.udo_BranchOfService);
                                        //}
                                        if (!string.IsNullOrEmpty(item.mcs_RELEASED_ACTIVE_DUTY_DATE))
                                        {
                                            //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "UDOgetContactRecordsProcessor ", "RELEASED_ACTIVE_DUTY_DATE:" + LatestServiceItem.mcs_RELEASED_ACTIVE_DUTY_DATE);

                                            DateTime newDateTime;
                                            if (DateTime.TryParse(dateStringFormat(item.mcs_RELEASED_ACTIVE_DUTY_DATE), out newDateTime))
                                            {
                                                response.UDOgetContactRecordsInfo.udo_activeReleaseDate = newDateTime;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                txnTimerconn.Stop();

                LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Birls", null, txnTimerconn.ElapsedMilliseconds);

                return progressString;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "get BirlsData Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to get BirlsData";
                response.ExceptionOccured = true;
                return progressString;
            }
        }

        private static string LongBranchOfService(string branchcode)
        {
            //JS switch (branchcode.trim())
            switch (branchcode.Trim())
            {
                case "AF":  return  "AIR FORCE (AF)";
                case "A":   return "ARMY (ARMY)";
                //ARMY AIR CORPS
                case "CG":  return "COAST GUARD (CG)"; 
                case "CA":  return "COMMONWEALTH ARMY (CA)"; 
                case "GCS": return "GUERRILLA AND COMBINATION SVC (GCS)"; 
                case "M":   return "MARINES (M)"; 
                case "MM":  return "MERCHANT MARINES (MM)"; 
                case "NOAA":return "NATIONAL OCEANIC & ATMOSPHERIC ADMINISTRATION (NOAA)"; 
                //NAVY (NAVY)
                case "PHS": return "PUBLIC HEALTH SVC (PHS)"; 
                case "RSS": return "REGULAR PHILIPPINE SCOUT (RSS)"; 
                //REGULAR PHILIPPINE SCOUT COMBINED WITH SPECIAL
                case "RPS": return "PHILIPPINE SCOUT OR COMMONWEALTH ARMY SVC (RPS)"; 
                case "SPS": return "SPECIAL PHILIPPINE SCOUTS (SPS)"; 
                case "WAC": return "WOMEN'S ARMY CORPS (WAC)"; 
            }
            return branchcode;
        }

        private static string getCorpData(UDOgetContactRecordsRequest request, UDOgetContactRecordsResponse response, string progressString)
        {
            try
            {


                DateTime myNow = DateTime.Now;
                var extendedTIWEnd = myNow.Hour.ToString("00") + ":" + myNow.Minute.ToString("00") + ":" + myNow.Second.ToString("00") + ":" + myNow.Millisecond.ToString("000");


                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "getCorpData ", extendedTIWEnd + "starting");
                Stopwatch txnTimerconn = Stopwatch.StartNew();
                var findCorporateRecordByFileNumberRequest = new VIMTcrpFNfindCorporateRecordByFileNumberRequest();
                findCorporateRecordByFileNumberRequest.LogTiming = request.LogTiming;
                findCorporateRecordByFileNumberRequest.LogSoap = request.LogSoap;
                findCorporateRecordByFileNumberRequest.Debug = request.Debug;
                findCorporateRecordByFileNumberRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findCorporateRecordByFileNumberRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findCorporateRecordByFileNumberRequest.RelatedParentId = request.RelatedParentId;
                findCorporateRecordByFileNumberRequest.UserId = request.UserId;
                findCorporateRecordByFileNumberRequest.OrganizationName = request.OrganizationName;

                if (request.LegacyServiceHeaderInfo != null)
                {
                    findCorporateRecordByFileNumberRequest.LegacyServiceHeaderInfo = new VIMT.VeteranWebService.Messages.HeaderInfo
                    {
                        ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                        ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                        LoginName = request.LegacyServiceHeaderInfo.LoginName,
                        StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                    };
                }
                //non standard fields
                findCorporateRecordByFileNumberRequest.mcs_filenumber = request.fileNumber;
                // TODO(TN): Comment to remediate
                var findCorporateRecordByFileNumberResponse = findCorporateRecordByFileNumberRequest.SendReceive<VIMTcrpFNfindCorporateRecordByFileNumberResponse>(MessageProcessType.Local);
                progressString = "After VIMT EC Call";
                LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Done with findCorp", null, txnTimerconn.ElapsedMilliseconds);

                response.ExceptionMessage = findCorporateRecordByFileNumberResponse.ExceptionMessage;
                response.ExceptionOccured = findCorporateRecordByFileNumberResponse.ExceptionOccured;
                // response.UDOgetContactRecordsInfo = new UDOgetContactRecords();
                if (findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo != null)
                {


                    var shrinq2Person = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo;
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_firstName))
                    {
                        response.UDOgetContactRecordsInfo.FirstName = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_firstName;

                    }
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_lastName))
                    {
                        response.UDOgetContactRecordsInfo.LastName = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_lastName;
                    }
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_middleName))
                    {
                        response.UDOgetContactRecordsInfo.MiddleName = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_middleName;
                    }


                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_dateOfBirth))
                    {
                        DateTime newDateTime;
                        if (DateTime.TryParse(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_dateOfBirth, out newDateTime))
                        {
                            response.UDOgetContactRecordsInfo.udo_DateofBirth = newDateTime;
                        }
                    }
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_emailAddress))
                    {
                        response.UDOgetContactRecordsInfo.EMailAddress1 = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_emailAddress;
                    }

                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneTypeNameOne))
                    {
                        response.UDOgetContactRecordsInfo.udo_Phone1Type = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneTypeNameOne;
                    }
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneNumberOne))
                    {
                        response.UDOgetContactRecordsInfo.Telephone1 = phoneNumberFormat(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_areaNumberOne + findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneNumberOne);
                        response.UDOgetContactRecordsInfo.udo_PhoneNumber1 = phoneNumberFormat(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_areaNumberOne + findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneNumberOne);
                    }
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_dateOfBirth))
                    {
                        response.UDOgetContactRecordsInfo.udo_BirthDateString = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_dateOfBirth;
                    }

                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneTypeNameTwo))
                    {
                        response.UDOgetContactRecordsInfo.udo_Phone2Type = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneTypeNameTwo;
                    }
                    var telephone2 = "";
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneNumberTwo))
                    {
                        telephone2 = "(" + findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_areaNumberTwo + ") " + findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneNumberTwo;
                        response.UDOgetContactRecordsInfo.udo_PhoneNumber2 = phoneNumberFormat(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_areaNumberTwo + findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_phoneNumberTwo);
                    }
                    if (!string.IsNullOrEmpty(findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_fiduciaryFolderLocation))
                    {
                        response.UDOgetContactRecordsInfo.udo_fidfolderloc = findCorporateRecordByFileNumberResponse.VIMTcrpFNreturnInfo.mcs_fiduciaryFolderLocation;
                    }
                }
                txnTimerconn.Stop();

                LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Corpdb", null, txnTimerconn.ElapsedMilliseconds);

                return progressString;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "get CorpDb Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to get CorpDb";
                response.ExceptionOccured = true;
                return progressString;
            }
        }
        private static string getEBenefitsData(UDOgetContactRecordsRequest request, UDOgetContactRecordsResponse response, string progressString)
        {
            try
            {
                DateTime myNow = DateTime.Now;
                var extendedTIWEnd = myNow.Hour.ToString("00") + ":" + myNow.Minute.ToString("00") + ":" + myNow.Second.ToString("00") + ":" + myNow.Millisecond.ToString("000");


                //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "getEBenefitsData ", extendedTIWEnd + "starting");
                Stopwatch txnTimerconn = Stopwatch.StartNew();


                if (!string.IsNullOrEmpty(request.edipi) && request.edipi != "UNK")
                {
                    var getEbenefitsStatus = new VIMTebenAccgetRegistrationStatusRequest();

                    getEbenefitsStatus.LogTiming = request.LogTiming;
                    getEbenefitsStatus.LogSoap = request.LogSoap;
                    getEbenefitsStatus.Debug = request.Debug;
                    getEbenefitsStatus.RelatedParentEntityName = request.RelatedParentEntityName;
                    getEbenefitsStatus.RelatedParentFieldName = request.RelatedParentFieldName;
                    getEbenefitsStatus.RelatedParentId = request.RelatedParentId;
                    getEbenefitsStatus.UserId = request.UserId;
                    getEbenefitsStatus.OrganizationName = request.OrganizationName;

                    if (request.LegacyServiceHeaderInfo != null)
                    {
                        getEbenefitsStatus.LegacyServiceHeaderInfo = new VIMT.EBenefitsAccountActivity.Messages.HeaderInfo
                        {
                            ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                            ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                            LoginName = request.LegacyServiceHeaderInfo.LoginName,
                            StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                        };
                    }
                    //non standard fields
                    getEbenefitsStatus.mcs_edipi = request.edipi;
                    // TODO(TN): Comment to remediate
                    var benefitsresponse = getEbenefitsStatus.SendReceive<VIMTebenAccgetRegistrationStatusResponse>(MessageProcessType.Local);
                    progressString = "After VIMT EC Call";
                    LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:Done with getEBenefitsData", null, txnTimerconn.ElapsedMilliseconds);

                    response.ExceptionMessage = benefitsresponse.ExceptionMessage;
                    response.ExceptionOccured = benefitsresponse.ExceptionOccured;
                    // response.UDOgetContactRecordsInfo = new UDOgetContactRecords();
                    if (benefitsresponse.VIMTebenAccgetRegistrationResponseRecordInfo != null)
                    {
                        var credLevel = benefitsresponse.VIMTebenAccgetRegistrationResponseRecordInfo.mcs_credLevelAtLastLogin;
                        var credLevelString = "Basic";
                        switch (credLevel)
                        {
                            case 0:
                                credLevelString = "None";
                                break;
                            case 1:
                                credLevelString = "Basic";
                                break;
                            default:
                                credLevelString = "Premium";
                                break;
                        }
                        response.UDOgetContactRecordsInfo.udo_ebenefitsStatus = "Registered: " + benefitsresponse.VIMTebenAccgetRegistrationResponseRecordInfo.mcs_isRegistered + "; Credlevel:" + credLevelString + "; Status:" + benefitsresponse.VIMTebenAccgetRegistrationResponseRecordInfo.mcs_status;
                        if (benefitsresponse.VIMTebenAccgetRegistrationResponseRecordInfo.mcs_isRegistered)
                        {
                            response.UDOgetContactRecordsInfo.udo_hasebenefits = 752280001;
                        }
                        else
                        {
                            response.UDOgetContactRecordsInfo.udo_hasebenefits = 752280000;
                        }
                    }
                }
                else
                {
                    //LogHelper.LogDebug(request.OrganizationName, request.Debug, request.UserId, "getEBenefitsData ", "No EDIPI, skipping ebenefits");
                }
                txnTimerconn.Stop();

                LogHelper.LogTiming(request.OrganizationName, request.Debug, request.UserId, Guid.Empty, null, null, "Contact:eBenefits", null, txnTimerconn.ElapsedMilliseconds);

                return progressString;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "get EBenefits DataProcessor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to get EBenefits";
                response.ExceptionOccured = true;
                return progressString;
            }
        }

        private static string dateStringFormat(string date)
        {
            //02101999
            if (date == null) return null;
            if (date.Length == 10) return date;
            if (date.Length < 8) return date;

            date = date.Insert(2, "/");
            //02/101999
            date = date.Insert(5, "/");
            //02/10/1999
            return date;
        }
        private static string phoneNumberFormat(string phonenumber)
        {
            //7034056868
            var returnNumber = "";

            if (phonenumber == null) return null;
            if (phonenumber.Length == 7)
            {
                returnNumber = phonenumber.Substring(0,3) + "-" + phonenumber.Substring(4);
            }

            if (phonenumber.Length == 10)
            {
                returnNumber = "(" + phonenumber.Substring(0,3) + ") " + phonenumber.Substring(3,3) + "-" + phonenumber.Substring(6);
            }

            if (phonenumber.Length  > 10)
            {
                returnNumber = "(" + phonenumber.Substring(0,3) + ") " + phonenumber.Substring(3,3) + "-" + phonenumber.Substring(6,4) + " " + phonenumber.Substring(9) ;
            }
            return returnNumber;
        }
    }
}
