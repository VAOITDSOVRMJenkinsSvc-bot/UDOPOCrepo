using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using System;
using System.Linq;
using VIMT.ClaimantWebService.Messages;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using VRM.Integration.UDO.Common;
using VRM.Integration.UDO.Denials.Messages;

/// <summary>
/// VIMT LOB Component for UDOcreateDenials,createDenials method, Processor.
/// Code Generated by IMS on: 6/27/2015 1:25:17 PM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Denials.Processors
{
    class UDOcreateDenialsProcessor
    {
        private bool _debug { get; set; }
        private const string method = "UDOcreateDenialsProcessor";
        private string LogBuffer { get; set; }

        public IMessageBase Execute(UDOcreateDenialsRequest request)
        {
            //var request = message as createDenialsRequest;
            UDOcreateDenialsResponse response = new UDOcreateDenialsResponse();
            var progressString = "Top of Processor";
            LogBuffer = string.Empty;
            _debug = request.Debug;

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            OrganizationServiceProxy OrgServiceProxy;

            #region connect to CRM
            try
            {
                var CommonFunctions = new CRMConnect();

                OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, "UDOcreateDenialsProcessor Processor, Connection Error", connectException.Message);                
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            progressString = "After Connection";

            try
            {
                // prefix = fednpctpfindDenialsByPtcpntIdRequest();
                var findDenialsByPtcpntIdRequest = new VIMTfednpctpfindDenialsByPtcpntIdRequest();
                findDenialsByPtcpntIdRequest.LogTiming = request.LogTiming;
                findDenialsByPtcpntIdRequest.LogSoap = request.LogSoap;
                findDenialsByPtcpntIdRequest.Debug = request.Debug;
                findDenialsByPtcpntIdRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findDenialsByPtcpntIdRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findDenialsByPtcpntIdRequest.RelatedParentId = request.RelatedParentId;
                findDenialsByPtcpntIdRequest.UserId = request.UserId;
                findDenialsByPtcpntIdRequest.OrganizationName = request.OrganizationName;
                if (request.LegacyServiceHeaderInfo != null)
                {
                    findDenialsByPtcpntIdRequest.LegacyServiceHeaderInfo = new VIMT.ClaimantWebService.Messages.HeaderInfo
                    {
                        ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                        ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                        LoginName = request.LegacyServiceHeaderInfo.LoginName,
                        StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                    };
                }
                findDenialsByPtcpntIdRequest.mcs_ptcpntid = request.ptcpntId;

                var findDenialsByPtcpntIdResponse = findDenialsByPtcpntIdRequest.SendReceive<VIMTfednpctpfindDenialsByPtcpntIdResponse>(MessageProcessType.Local);
                progressString = "After VIMT EC Call";
                var requestCollection = new OrganizationRequestCollection();

                response.ExceptionMessage = findDenialsByPtcpntIdResponse.ExceptionMessage;
                response.ExceptionOccured = findDenialsByPtcpntIdResponse.ExceptionOccured;
                if (findDenialsByPtcpntIdResponse.VIMTfednpctpreturnclmsInfo.VIMTfednpctpdenialsclmsInfo != null)
                {
                    var denial = findDenialsByPtcpntIdResponse.VIMTfednpctpreturnclmsInfo.VIMTfednpctpdenialsclmsInfo;
                    System.Collections.Generic.List<UDOcreateDenialsMultipleResponse> UDOcreateDenialsArray = new System.Collections.Generic.List<UDOcreateDenialsMultipleResponse>();
                    foreach (var denialItem in denial)
                    {
                        var responseIds = new UDOcreateDenialsMultipleResponse();
                        //instantiate the new Entity
                        Entity thisNewEntity = new Entity();
                        thisNewEntity.LogicalName = "udo_denial";
                        thisNewEntity["udo_name"] = "Denial Summary";
                        if (request.ownerId != System.Guid.Empty)
                        {
                            thisNewEntity["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_awardTypeNm))
                        {
                            thisNewEntity["udo_awardtype"] = denialItem.mcs_awardTypeNm;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_adminDate))
                        {
                            thisNewEntity["udo_admindate"] = dateStringFormat(denialItem.mcs_adminDate);

                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_claimDate))
                        {
                            thisNewEntity["udo_claimdate"] = dateStringFormat(denialItem.mcs_claimDate);
                            
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_claimPayeeCd))
                        {
                            thisNewEntity["udo_claimpayeecode"] = denialItem.mcs_claimPayeeCd;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_claimTypeNm))
                        {
                            thisNewEntity["udo_claimtype"] = denialItem.mcs_claimTypeNm;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_claimTypeCd))
                        {
                            thisNewEntity["udo_claimtypecode"] = denialItem.mcs_claimTypeCd;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_decisionDate))
                        {
                            thisNewEntity["udo_decisiondate"] = dateStringFormat(denialItem.mcs_decisionDate);
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_decisionType))
                        {
                            thisNewEntity["udo_decisiontype"] = denialItem.mcs_decisionType;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_programTypeCd))
                        {
                            thisNewEntity["udo_programtypecode"] = denialItem.mcs_programTypeCd;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_rbaId))
                        {
                            thisNewEntity["udo_rbaid"] = denialItem.mcs_rbaId;
                        }
                        if (!string.IsNullOrEmpty(denialItem.mcs_decisionNm))
                        {
                            thisNewEntity["udo_reasonpreview"] = denialItem.mcs_decisionNm;
                        }
                        //not mapped thisNewEntity["udo_fullreason"]=??
                        
                        
                        if (request.UDOcreateDenialsRelatedEntitiesInfo != null)
                        {
                            foreach (var relatedItem in request.UDOcreateDenialsRelatedEntitiesInfo)
                            {
                                thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                            }
                        }
                        CreateRequest createData = new CreateRequest
                        {
                            Target = thisNewEntity
                        };
                        requestCollection.Add(createData);
                    }

                    #region Create records

                    if (requestCollection.Count() > 0)
                    {
                        var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

                        if (_debug)
                        {
                            LogBuffer += result.LogDetail;
                            LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
                        }

                        if (result.IsFaulted)
                        {
                            LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
                            response.ExceptionMessage = result.FriendlyDetail;
                            response.ExceptionOccured = true;
                            return response;
                        }
                    }
                    #endregion

                    string logInfo = string.Format("Denials Records Created: {0}", requestCollection.Count());
                    LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "Denials Records Created", logInfo);
                }
                //added to generated code
                if (request.udo_idproof != System.Guid.Empty)
                {
                    var parent = new Entity();
                    parent.Id = request.udo_idproof;
                    parent.LogicalName = "udo_idproof";
                    parent["udo_denialscomplete"] = true;
                    OrgServiceProxy.Update(TruncateHelper.TruncateFields(parent, request.OrganizationName, request.UserId, request.LogTiming));
                }
                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, "UDOcreateDenialsProcessor Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to Map Denials EC data to LOB";
                response.ExceptionOccured = true;
                return response;
            }
        }

        private static string dateStringFormat(string date)
        {
            if (date == null) return null;
            if (date.Length == 10) return date;
            if (date.Length < 8) return date;

            date = date.Insert(2, "/");
            date = date.Insert(5, "/");
            return date;
        }
    }

}