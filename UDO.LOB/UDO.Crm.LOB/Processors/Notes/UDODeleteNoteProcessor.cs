using System;
using VIMT.DevelopmentNotesService.Messages;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using VRM.Integration.UDO.Notes.Messages;


/// <summary>
/// VIMT LOB Component for UDOCreateNote,CreateNote method, Processor.
/// Code Generated by IMS on: 6/27/2015 2:48:16 PM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Notes.Processors
{
    public class UDODeleteNoteProcessor
    {
        private bool _debug { get; set; }
        private const string method = "UDODeleteNoteProcessor";
        private string LogBuffer { get; set; }

        public IMessageBase Execute(UDODeleteNoteRequest request)
        {
            //var request = message as CreateNoteRequest;
            UDODeleteNoteResponse response = new UDODeleteNoteResponse();
            var progressString = "Top of Processor";
            LogBuffer = string.Empty;
            _debug = request.Debug;

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            try
            {
                // prefix = createcreateNoteRequest();
                var deleteNoteRequest = new VIMTdeletedeleteNoteRequest();
                deleteNoteRequest.LogTiming = request.LogTiming;
                deleteNoteRequest.LogSoap = request.LogSoap;
                deleteNoteRequest.Debug = request.Debug;
                deleteNoteRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                deleteNoteRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                deleteNoteRequest.RelatedParentId = request.RelatedParentId;
                deleteNoteRequest.UserId = request.UserId;
                deleteNoteRequest.OrganizationName = request.OrganizationName;


                var modifiedDate = DateTime.Now;
                deleteNoteRequest.noteInfo = new VIMTdeletenote
                {
                    mcs_noteOutTn = request.udo_Type,
                    mcs_suspnsDt = modifiedDate,
                    mcs_suspnsDtSpecified = true,
                    mcs_txt = request.udo_Note,
                    mcs_userId = request.udo_User,
                    mcs_ptcpntId = request.udo_ParticipantID,

                    mcs_jrnDt = modifiedDate,
                    mcs_jrnDtSpecified = true,
                    mcs_modifdDt = modifiedDate,
                    mcs_modifdDtSpecified = true
                };
                deleteNoteRequest.LegacyServiceHeaderInfo = new VIMT.DevelopmentNotesService.Messages.HeaderInfo
                {
                    ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                    ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                    LoginName = request.LegacyServiceHeaderInfo.LoginName,
                    StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                };
                DateTime dtTime;
                if (!String.IsNullOrEmpty(request.udo_dtTime))
                {
                    dtTime = DateTime.Parse(request.udo_dtTime);
                    deleteNoteRequest.noteInfo.mcs_createDt = dtTime;
                    deleteNoteRequest.noteInfo.mcs_createDtSpecified = true;
                }
                else
                {
                    if (request.udo_LegacyNoteId.Length > 0)
                    {

                        deleteNoteRequest.noteInfo.mcs_noteId = request.udo_LegacyNoteId;
                    }
                }
                if (request.udo_ClaimId != null)
                {
                    deleteNoteRequest.noteInfo.mcs_bnftClmNoteTc = "CLMDVLNOTE";
                    deleteNoteRequest.noteInfo.mcs_noteOutTn = "Claim Development Note";
                    deleteNoteRequest.noteInfo.mcs_clmId = request.udo_ClaimId;
                }
                else
                {
                    deleteNoteRequest.noteInfo.mcs_ptcpntNoteTc = "CLMNTCONTACT";
                    deleteNoteRequest.noteInfo.mcs_noteOutTn = "Contact with Claimant";
                }


                if (!string.IsNullOrEmpty(request.udo_ClaimId))
                {
                    deleteNoteRequest.noteInfo.mcs_callId = Int64.Parse(request.udo_ClaimId);
                }


                var deleteNoteResponse = deleteNoteRequest.SendReceive<VIMTdeletedeleteNoteResponse>(MessageProcessType.Local);
                progressString = "After VIMT EC Call";

                response.ExceptionMessage = deleteNoteResponse.ExceptionMessage;
                response.ExceptionOccured = deleteNoteResponse.ExceptionOccured;
                if (deleteNoteResponse.VIMTdeleteVoidInfo != null)
                {

                }
                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, method + " Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to Process Notes Data Deletion"; 
                response.ExceptionOccured = true;
                return response;
            }
        }
    }
}