using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
// Added VIMT Messages Reference. Check this
using VIMT.AppealService.Messages;
// Added VRM Assembly reference
using VRM.Integration.Servicebus.Core;
using VRM.Integration.UDO.Appeals.Messages;
//using CRM007.CRM.SDK.Core;
//using VRM.Integration.Servicebus.Logging.CRM.Util;
// using Logger = VRM.Integration.Servicebus.Core.Logger;

/// <summary>
/// VIMT LOB Component for UDOcreateUDOAppealDates,createUDOAppealDates method, Processor.
/// Code Generated by IMS on: 7/10/2015 11:20:59 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Appeals.Processors
{
    internal class createUDOAppealDatesProcessor
    {
        public IMessageBase Execute(UDOcreateUDOAppealDatesRequest request)
        {
            //var request = message as createUDOAppealDatesRequest;
            UDOcreateUDOAppealDatesResponse response = new UDOcreateUDOAppealDatesResponse();
            string progressString = "Top of Processor";

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            //TODO (NP): Logger.Instance.Info(string.Format("Message Id:{0}, Type={2}, Recieved diagnostics message: {1}",
            //request.MessageId,
            //request.MessageId,
            //GetType().FullName));

            try
            {
                // prefix = gtaplgetAppealRequest();
                VIMTgtaplgetAppealRequest getAppealRequest = new VIMTgtaplgetAppealRequest();
                getAppealRequest.LogTiming = request.LogTiming;
                getAppealRequest.LogSoap = request.LogSoap;
                getAppealRequest.Debug = request.Debug;
                getAppealRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                getAppealRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                getAppealRequest.RelatedParentId = request.RelatedParentId;
                getAppealRequest.UserId = request.UserId;
                getAppealRequest.OrganizationName = request.OrganizationName;

                //non standard fields
                //TODO(NP): Update the VIMT call to VEIS
                VIMTgtaplgetAppealResponse getAppealResponse = getAppealRequest.SendReceive<VIMTgtaplgetAppealResponse>(MessageProcessType.Local);
                progressString = "After VIMT EC Call";

                response.ExceptionMessage = getAppealResponse.ExceptionMessage;
                response.ExceptionOccured = getAppealResponse.ExceptionOccured;
                if (getAppealResponse.VIMTgtaplGetAppealResponseInfo.VIMTgtaplAppealRecordInfo.VIMTgtaplAppealDateInfo != null)
                {
                    VIMTgtaplAppealDateMultipleResponse[] AppealDate = getAppealResponse.VIMTgtaplGetAppealResponseInfo.VIMTgtaplAppealRecordInfo.VIMTgtaplAppealDateInfo;
                    System.Collections.Generic.List<UDOcreateUDOAppealDatesMultipleResponse> UDOcreateUDOAppealDatesArray = new System.Collections.Generic.List<UDOcreateUDOAppealDatesMultipleResponse>();
                    foreach (VIMTgtaplAppealDateMultipleResponse AppealDateItem in AppealDate)
                    {
                        if (AppealDateItem.mcs_DateTypeDescription != string.Empty)
                        {
                            // response.UDOcreateUDOAppealDatesInfo.udo_DateTypeDescription = AppealDateItem.mcs_DateTypeDescription;
                        }
                        if (AppealDateItem.mcs_DateTypeCode != string.Empty)
                        {
                            // response.UDOcreateUDOAppealDatesInfo.udo_DateTypeCode = AppealDateItem.mcs_DateTypeCode;
                        }
                        if (AppealDateItem.mcs_Date != System.DateTime.MinValue)
                        {
                            // response.UDOcreateUDOAppealDatesInfo.udo_Date = AppealDateItem.mcs_Date;
                        }
                        //TODO: Commented 
                        // UDOcreateUDOAppealDatesArray.Add(responseIds);
                    }
                    response.UDOcreateUDOAppealDatesInfo = UDOcreateUDOAppealDatesArray.ToArray();
                }
                return response;

            }

            catch (Exception connectException)
            {
                // LogHelper.LogError(request.OrganizationName, "mcs_udoclaim", request.UserId, "UDOcreateUDOAppealDatesProcessor Processor, Progess:" + progressString, connectException);
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
        }
    }
}