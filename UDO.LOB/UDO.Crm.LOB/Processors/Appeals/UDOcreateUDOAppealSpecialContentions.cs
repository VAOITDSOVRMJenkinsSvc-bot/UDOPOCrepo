using CRM007.CRM.SDK.Core;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Crm.Sdk.Messages;
using System;
using System.Collections.Generic;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.UDO.Appeals.Messages;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using Logger = VRM.Integration.Servicebus.Core.Logger;
/// <summary>
/// VIMT LOB Component for UDOcreateUDOAppealSpecialContentions,createUDOAppealSpecialContentions method, Processor.
/// Code Generated by IMS on: 7/10/2015 11:19:08 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
using VIMT.AppealService.Messages;
using VRM.Integration.Common;
namespace VRM.Integration.UDO.Appeals.Processors
{
    class UDOcreateUDOAppealSpecialContentionsProcessor
    {
        public IMessageBase Execute(UDOcreateUDOAppealSpecialContentionsRequest request)
        {
            //var request = message as createUDOAppealSpecialContentionsRequest;
            UDOcreateUDOAppealSpecialContentionsResponse response = new UDOcreateUDOAppealSpecialContentionsResponse();
            var progressString = "Top of Processor";

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            Logger.Instance.Info(string.Format("Message Id:{0}, Type={2}, Recieved diagnostics message: {1}",
            request.MessageId,
            request.MessageId,
            GetType().FullName));

            OrganizationServiceProxy OrgServiceProxy;

            #region connect to CRM
            try
            {
                var CommonFunctions = new CRMCommonFunctions();

                OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, "mcs_createUDOAppealSpecialContentions", request.UserId, "UDOcreateUDOAppealSpecialContentionsProcessor Processor, Progess:" + progressString, connectException);
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            progressString = "After Connection";

            try
            {
                // prefix = gtaplgetAppealRequest();
                var getAppealRequest = new VIMTgtaplgetAppealRequest();
                getAppealRequest.LogTiming = request.LogTiming;
                getAppealRequest.LogSoap = request.LogSoap;
                getAppealRequest.Debug = request.Debug;
                getAppealRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                getAppealRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                getAppealRequest.RelatedParentId = request.RelatedParentId;
                getAppealRequest.UserId = request.UserId;
                getAppealRequest.OrganizationName = request.OrganizationName;


                var getAppealResponse = getAppealRequest.SendReceive<VIMTgtaplgetAppealResponse>(MessageProcessType.Local);
                progressString = "After VIMT EC Call";

                response.ExceptionMessage = getAppealResponse.ExceptionMessage;
                response.ExceptionOccured = getAppealResponse.ExceptionOccured;
                if (getAppealResponse.VIMTgtaplAppealRecord1Info.VIMTgtaplAppealRecordInfo.VIMTgtaplAppealDecisionInfo.VIMTgtaplSpecialContentionsInfo != null)
                {
                    var SpecialContentions = getAppealResponse.VIMTgtaplAppealRecord1Info.VIMTgtaplAppealRecordInfo.VIMTgtaplAppealDecisionInfo.VIMTgtaplSpecialContentionsInfo;
                    System.Collections.Generic.List<UDOcreateUDOAppealSpecialContentionsMultipleResponse> UDOcreateUDOAppealSpecialContentionsArray = new System.Collections.Generic.List<UDOcreateUDOAppealSpecialContentionsMultipleResponse>();
                    foreach (var SpecialContentionsItem in SpecialContentions)
                    {
                        var responseIds = new UDOcreateUDOAppealSpecialContentionsMultipleResponse();
                        //instantiate the new Entity
                        Entity thisNewEntity = new Entity();
                        thisNewEntity.LogicalName = "";
                        if (!string.IsNullOrEmpty(SpecialContentionsItem.mcs_ContentionIndicator))
                        {
                            thisNewEntity["udo_contentionindicator"] = SpecialContentionsItem.mcs_ContentionIndicator;
                        }
                        if (!string.IsNullOrEmpty(SpecialContentionsItem.mcs_ContentionDescription))
                        {
                            thisNewEntity["udo_contentiondescription"] = SpecialContentionsItem.mcs_ContentionDescription;
                        }
                        if (!string.IsNullOrEmpty(SpecialContentionsItem.mcs_ContentionCode))
                        {
                            thisNewEntity["udo_contentioncode"] = SpecialContentionsItem.mcs_ContentionCode;
                        }
                        if (request.UDOcreateUDOAppealSpecialContentionsRelatedEntitiesInfo != null)
                        {
                            foreach (var relatedItem in request.UDOcreateUDOAppealSpecialContentionsRelatedEntitiesInfo)
                            {
                                thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                            }
                        }
                        responseIds.newUDOcreateUDOAppealSpecialContentionsId = OrgServiceProxy.Create(thisNewEntity);
                        UDOcreateUDOAppealSpecialContentionsArray.Add(responseIds);
                    }
                    response.UDOcreateUDOAppealSpecialContentionsInfo = UDOcreateUDOAppealSpecialContentionsArray.ToArray();
                }
                //added to generated code
                if (request.udo_appealId != System.Guid.Empty)
                {
                    var parent = new Entity();
                    parent.Id = request.udo_appealId;
                    parent.LogicalName = "udo_appeal";
                    parent["udo_appealspecialcontentionscomplete"] = true;
                    parent["udo_appealspecialcontentionsmessage"] = "";
                    OrgServiceProxy.Update(parent);
                }
                return response;
            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, "udo_appealspecialcontentions", request.UserId, "UDOcreateUDOAppealSpecialContentionsProcessor Processor, Progess:" + progressString, connectException);
                response.ExceptionMessage = "Failed to Map EC data to LOB";
                response.ExceptionOccured = true;
                if (request.udo_appealId != System.Guid.Empty)
                {
                    var parent = new Entity();
                    parent.Id = request.udo_appealId;
                    parent.LogicalName = "udo_appeal";
                    parent["udo_appealspecialcontentionsmessage"] = "";
                    OrgServiceProxy.Update(parent);
                }
                return response;
            }
        }
    }
}