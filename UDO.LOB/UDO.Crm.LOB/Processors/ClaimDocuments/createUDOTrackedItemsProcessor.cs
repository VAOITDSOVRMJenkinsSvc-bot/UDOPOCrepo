using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using System;
using System.Linq;
using VIMT.TrackedItemServiceRemote.Messages;
using VRM.Integration.Common;
using VRM.Integration.Servicebus.Core;
using VRM.Integration.Servicebus.Logging.CRM.Util;
using VRM.Integration.UDO.Claims.Messages;
using VRM.Integration.UDO.Common;

/// <summary>
/// VIMT LOB Component for UDOcreateUDOTrackedItems,createUDOTrackedItems method, Processor.
/// Code Generated by IMS on: 5/29/2015 2:35:54 PM
/// Version: 2015.05.05
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Claims.Processors
{
    class UDOcreateUDOTrackedItemsProcessor
    {
        private bool _debug { get; set; }
        private const string method = "UDOcreateUDOTrackedItemsProcessor";
        private string LogBuffer { get; set; }

        public IMessageBase Execute(UDOcreateUDOTrackedItemsRequest request)
        {
            //var request = message as createUDOTrackedItemsRequest;
            UDOcreateUDOTrackedItemsResponse response = new UDOcreateUDOTrackedItemsResponse();
            var progressString = "Top of Processor";
            LogBuffer = string.Empty;
            _debug = request.Debug;

            if (request == null)
            {
                response.ExceptionMessage = "Called with no message";
                response.ExceptionOccured = true;
                return response;
            }

            OrganizationServiceProxy OrgServiceProxy;

            #region connect to CRM
            try
            {
                var CommonFunctions = new CRMCommonFunctions();
                OrgServiceProxy = CommonFunctions.ConnectToCrm(request.OrganizationName);

            }
            catch (Exception connectException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, string.Format("{0} Processor, Connection Error", method), connectException.Message);                
                response.ExceptionMessage = "Failed to get CRMConnection";
                response.ExceptionOccured = true;
                return response;
            }
            #endregion

            progressString = "After Connection";

            try
            {
                // prefix = findTrackedItemsRequest();
                var findTrackedItemsRequest = new VIMTfindTrackedItemsRequest();
                findTrackedItemsRequest.LogTiming = request.LogTiming;
                findTrackedItemsRequest.LogSoap = request.LogSoap;
                findTrackedItemsRequest.Debug = request.Debug;
                findTrackedItemsRequest.RelatedParentEntityName = request.RelatedParentEntityName;
                findTrackedItemsRequest.RelatedParentFieldName = request.RelatedParentFieldName;
                findTrackedItemsRequest.RelatedParentId = request.RelatedParentId;
                findTrackedItemsRequest.UserId = request.UserId;
                findTrackedItemsRequest.OrganizationName = request.OrganizationName;

                findTrackedItemsRequest.mcs_claimid = request.claimId;
                findTrackedItemsRequest.LegacyServiceHeaderInfo = new VIMT.TrackedItemServiceRemote.Messages.HeaderInfo
                {
                    ApplicationName = request.LegacyServiceHeaderInfo.ApplicationName,
                    ClientMachine = request.LegacyServiceHeaderInfo.ClientMachine,
                    LoginName = request.LegacyServiceHeaderInfo.LoginName,
                   
                    StationNumber = request.LegacyServiceHeaderInfo.StationNumber
                };
                var findTrackedItemsResponse = findTrackedItemsRequest.SendReceive<VIMTfindTrackedItemsResponse>(MessageProcessType.Remote);
                progressString = "After VIMT EC Call";
                var requestCollection = new OrganizationRequestCollection();

                response.ExceptionMessage = findTrackedItemsResponse.ExceptionMessage;
                response.ExceptionOccured = findTrackedItemsResponse.ExceptionOccured;
                #region trackedItem Part
                int trackItemCount = 0;
                if (findTrackedItemsResponse.VIMTBenefitClaimtrkItemInfo.VIMTdvlpmtItemstrkItemInfo != null)
                {
                    var developmentItem = findTrackedItemsResponse.VIMTBenefitClaimtrkItemInfo.VIMTdvlpmtItemstrkItemInfo;
                    System.Collections.Generic.List<UDOcreateUDOTrackedItemsMultipleResponse> UDOcreateUDOTrackedItemsArray = new System.Collections.Generic.List<UDOcreateUDOTrackedItemsMultipleResponse>();
                    foreach (var developmentItemItem in developmentItem)
                    {
                        var responseIds = new UDOcreateUDOTrackedItemsMultipleResponse();
                        //instantiate the new Entity
                        Entity thisNewEntity = new Entity();
                        thisNewEntity.LogicalName = "udo_trackeditem";
                        if (request.ownerId != System.Guid.Empty)
                        {
                            thisNewEntity["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                        }
                        if (findTrackedItemsResponse.VIMTBenefitClaimtrkItemInfo.mcs_closedDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_closeddate"] = findTrackedItemsResponse.VIMTBenefitClaimtrkItemInfo.mcs_closedDt;
                        }
                        if (developmentItemItem.mcs_recipient != string.Empty)
                        {
                            thisNewEntity["udo_receipient"] = developmentItemItem.mcs_recipient;
                        }
                        if (developmentItemItem.mcs_receiveDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_receiveddate"] = developmentItemItem.mcs_receiveDt;
                        }
                        if (developmentItemItem.mcs_reqDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_requestdate"] = developmentItemItem.mcs_reqDt;
                        }
                        if (developmentItemItem.mcs_suspnsDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_suspensedate"] = developmentItemItem.mcs_suspnsDt;
                        }
                        if (developmentItemItem.mcs_shortNm != string.Empty)
                        {
                            thisNewEntity["udo_developmentactionletter"] = developmentItemItem.mcs_shortNm;
                        }
                        if (developmentItemItem.mcs_inErrorDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_inerrordate"] = developmentItemItem.mcs_inErrorDt;
                        }
                        if (developmentItemItem.mcs_followDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_followupdate"] = developmentItemItem.mcs_followDt;
                        }
                        if (developmentItemItem.mcs_scndFlwDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_secondfollowupdate"] = developmentItemItem.mcs_scndFlwDt;
                        }
                        if (developmentItemItem.mcs_acceptDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_acceptdate"] = developmentItemItem.mcs_acceptDt;
                        }

                        if (developmentItemItem.mcs_dvlpmtTc != string.Empty)
                        {
                            thisNewEntity["udo_devitemtc"] = developmentItemItem.mcs_dvlpmtTc;
                        }

                        if (request.UDOcreateUDOTrackedItemsRelatedEntitiesInfo != null)
                        {
                            foreach (var relatedItem in request.UDOcreateUDOTrackedItemsRelatedEntitiesInfo)
                            {
                                thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                            }
                        }
                        //responseIds.newUDOcreateUDOTrackedItemsId = OrgServiceProxy.Create(thisNewEntity);
                        //UDOcreateUDOTrackedItemsArray.Add(responseIds);
                        CreateRequest createData = new CreateRequest
                        {
                            Target = thisNewEntity
                        };
                        requestCollection.Add(createData);
                        trackItemCount += 1;
                    }
                    //response.UDOcreateUDOTrackedItemsInfo = UDOcreateUDOTrackedItemsArray.ToArray();

                    

                }
                #endregion

                #region MAPDLetters Part
                int letterCount = 0;
                if (findTrackedItemsResponse.VIMTBenefitClaimtrkItemInfo.VIMTletterstrkItemInfo != null)
                {
                    var letter = findTrackedItemsResponse.VIMTBenefitClaimtrkItemInfo.VIMTletterstrkItemInfo;
                    //System.Collections.Generic.List<UDOcreateUDOMAPDLettersMultipleResponse> UDOcreateUDOMAPDLettersArray = new System.Collections.Generic.List<UDOcreateUDOMAPDLettersMultipleResponse>();
                    foreach (var letterItem in letter)
                    {
                     //   var responseIds = new UDOcreateUDOMAPDLettersMultipleResponse();
                        //instantiate the new Entity
                        Entity thisNewEntity = new Entity();
                        thisNewEntity.LogicalName = "udo_mapdletter";
                        if (request.ownerId != System.Guid.Empty)
                        {
                            thisNewEntity["ownerid"] = new EntityReference(request.ownerType, request.ownerId);
                        }
                        if (letterItem.mcs_dcmntDt != System.DateTime.MinValue)
                        {
                            thisNewEntity["udo_dateissued"] = letterItem.mcs_dcmntDt;
                        }
                        if (letterItem.mcs_ptcpntId != string.Empty)
                        {
                            thisNewEntity["udo_participantid"] = letterItem.mcs_ptcpntId;
                        }
                        if (letterItem.mcs_dvlpmtTc != string.Empty)
                        {
                            thisNewEntity["udo_typecode"] = letterItem.mcs_dvlpmtTc;
                        }
                        if (letterItem.mcs_nm != string.Empty)
                        {
                            thisNewEntity["udo_typeofletter"] = letterItem.mcs_nm;
                        }
                        if (request.UDOcreateUDOTrackedItemsRelatedEntitiesInfo != null)
                        {
                            foreach (var relatedItem in request.UDOcreateUDOTrackedItemsRelatedEntitiesInfo)
                            {
                                thisNewEntity[relatedItem.RelatedEntityFieldName] = new EntityReference(relatedItem.RelatedEntityName, relatedItem.RelatedEntityId);
                            }
                        }
                        //OrgServiceProxy.Create(thisNewEntity);
                        CreateRequest createData = new CreateRequest
                        {
                            Target = thisNewEntity
                        };
                        requestCollection.Add(createData);
                        letterCount += 1;
                    }
                }
                #endregion

                #region Create records

                if (requestCollection.Count() > 0)
                {
                    var result = ExecuteMultipleHelper.ExecuteMultiple(OrgServiceProxy, requestCollection, request.OrganizationName, request.UserId, request.Debug);

                    if (_debug)
                    {
                        LogBuffer += result.LogDetail;
                        LogHelper.LogDebug(request.OrganizationName, _debug, request.UserId, method, LogBuffer);
                    }

                    if (result.IsFaulted)
                    {
                        LogHelper.LogError(request.OrganizationName, request.UserId, method, result.ErrorDetail);
                        response.ExceptionMessage = result.FriendlyDetail;
                        response.ExceptionOccured = true;
                        return response;
                    }
                }

                string logInfo = string.Format("Tracked Item Records Created: {0}; MAPD Letter Records Created: {1}", trackItemCount, letterCount);
                LogHelper.LogInfo(request.OrganizationName, request.Debug, request.UserId, "MAPD Letter and Tracked Item Records Created", logInfo);
                #endregion

                //added to generated code
                if (request.udo_claimId != null && request.udo_claimId != Guid.Empty)
                {
                    var parent = new Entity();
                    parent.Id = request.udo_claimId;
                    parent.LogicalName = "udo_claim";
                    parent["udo_trackeditemmapdcomplete"] = true;
                    //parent["udo_trackeditemmessage"] = "";
                    OrgServiceProxy.Update(TruncateHelper.TruncateFields(parent, request.OrganizationName, request.UserId, request.LogTiming));
                }
                return response;
            }
            catch (Exception ExecutionException)
            {
                LogHelper.LogError(request.OrganizationName, request.UserId, request.RelatedParentId, request.RelatedParentEntityName, request.RelatedParentFieldName, method + " Processor, Progess:" + progressString, ExecutionException);
                response.ExceptionMessage = "Failed to Process Track Item/MAPD Letter Data"; 
                response.ExceptionOccured = true;
                return response;
            }
        }
    }
}