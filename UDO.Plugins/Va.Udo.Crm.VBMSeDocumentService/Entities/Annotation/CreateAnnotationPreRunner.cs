using System;
using System.Linq;
using MCSPlugins;
using MCSUtilities2011;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk.Query;
using VRM.Integration.UDO.VBMS.Messages;
//using VRMRest;
//using Xrm;
using System.ServiceModel;
using System.Diagnostics;
using VRMRest;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using UDO.LOB.Core;
/// <summary>
/// VIMT LOB Component for UDOcreateAwardAdjustment,createAwardAdjustment method, PluginRunner.
/// Code Generated by IMS on: 6/4/2015 9:39:25 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.VBMS.Plugins
{
    internal class CreateAnnotationPreRunner : PluginRunner
    {
        private const string _logTimerField = "udo_vbmslogtimer";
        private const string _logSoapField = "udo_vbmslogsoap";
        private const string _debugField = "udo_vbmsdebug";
        private const string _vimtRestEndpointField = "crme_restendpointforvimt";
        private const string _source = "CRM";

        bool _logSoap = false;
        bool _logTimer = false;
        bool _debug = false;

        string _uri = "";

        internal CRMAuthTokenConfiguration _crmAuthTokenConfig;

        public CreateAnnotationPreRunner(IServiceProvider serviceProvider)
            : base(serviceProvider)
        { }
        public override Entity GetPrimaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override Entity GetSecondaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override string McsSettingsDebugField
        {
            get { return "udo_vbmsdebug"; }
        }
        internal void Execute()
        {
            try
            {
                Logger.setDebug = true;
                #region Get Target Annotation
                var entity = GetPrimaryEntity();

                if (entity == null)
                {
                    throw new InvalidPluginExecutionException("Target entity is null.");
                }
                if (!String.Equals(entity.LogicalName, "annotation", StringComparison.InvariantCultureIgnoreCase))
                {
                    throw new InvalidPluginExecutionException("Target entity is not a note (annotation).");
                }
                #endregion

                Trace("Entity is annotation, proceeding with conditional checks");

                #region Start Timer
                Stopwatch txnTimer = Stopwatch.StartNew();
                #endregion

                #region Plugin Execution Conditions

                if (PluginExecutionContext.Depth > 1)
                {
                    Trace("Context Depth greater than 1.");
                    txnTimer.Stop();
                    return;
                }
                if (!entity.Contains("documentbody") || String.IsNullOrEmpty(entity["documentbody"].ToString()))
                {
                    Trace("Note does not have a document body.");
                    txnTimer.Stop();
                    return; // no document
                }

                if (!entity.Contains("objectid"))
                {
                    Trace("Note is not regarding another entity.");
                    txnTimer.Stop();
                    return; // not regarding an object
                }

                var regardingObject = (EntityReference)entity["objectid"];

                if (regardingObject == null || !String.Equals(regardingObject.LogicalName, "udo_vbmsdocument", StringComparison.InvariantCultureIgnoreCase))
                {

                    Trace("Note is not regarding a VBMS document");
                    txnTimer.Stop();
                    return; //not linked to vbmsdocument
                }
                #endregion

                #region This is a VBMS Document - Get VIMT Settings
                Trace("This is is a VBMS document annotation.");

                getSettingValues();

                LogSettings _logSettings = new LogSettings()
                {
                    Org = PluginExecutionContext.OrganizationName,
                    ConfigFieldName = "RESTCALL",
                    UserId = PluginExecutionContext.UserId,
                    callingMethod = "CreateAnnotationPre"
                };

                Uri uri = new Uri(_uri);

                if (string.IsNullOrEmpty(_uri))
                {
                    //Logger.WriteToFile("NO URI FOUND, cannot call VIMT");
                    Trace("NO URI FOUND, cannot call VIMT");
                    txnTimer.Stop();
                    return;
                }
                #endregion

                // All notes created regarding a udo_vbmsdocument are uploaded to VBMS.
                //Logger.WriteDebugMessage("Before file upload.");
                //Logger.WriteDebugMessage("URI:" + _uri);
                Trace("Before file upload.");
                try
                {
                    var veteran = new Veteran(OrganizationService, regardingObject);
                    //Logger.WriteDebugMessage("Veteran info retrieved.");
                    Trace("Veteran info retrieved.");

                    HeaderInfo HeaderInfo = GetHeaderInfo();

                    string roleName = string.Empty;

                    var role = entity.GetAttributeValue<OptionSetValue>("udo_vbmsuploadrole");
                    if (role != null)
                    {
                        roleName = Utilities.getOptionSetString(role.Value, entity.LogicalName, "udo_vbmsuploadrole", TracingService);
                    }

                    //Logger.WriteDebugMessage("Set HeaderInfo");

                    var user = OrganizationService.Retrieve("systemuser", PluginExecutionContext.UserId, new ColumnSet("fullname"));
                    string userName = string.Empty;
                    if (user != null) user.GetAttributeValue<string>("fullname");

                    var fileName = entity["filename"].ToString();
                    if (String.IsNullOrEmpty(fileName))
                    {
                        //Logger.WriteDebugMessage("Filename empty.");
                        Trace("Filename empty.");
                        txnTimer.Stop();
                        return;
                    }
                    //Logger.WriteDebugMessage("Set Filename: {0}", fileName);

                    var filecontents = entity["documentbody"].ToString();
                    //Logger.WriteDebugMessage("Got file contents.");
                    Trace("Got file contents.");

                    var request = new UDOVBMSUploadDocumentRequest()
                    {
                        LegacyServiceHeaderInfo = HeaderInfo,
                        CorrelationId = PluginExecutionContext.CorrelationId.ToString(),
                        MessageId = PluginExecutionContext.CorrelationId.ToString(),
                        Debug = McsSettings.getDebug,
                        //DebugLevel = _debug ? 2 : 0,
                        //LogSoap = _logSoap,
                        LogTiming = _logTimer,
                        //Debug = true,
                        //DebugLevel = _debug ? 2 : 0,
                        //LogSoap = true,
                        //LogTiming = true,
                        UserId = PluginExecutionContext.UserId,
                        OrganizationName = PluginExecutionContext.OrganizationName,
                        
                        /*** VBMS Request Fields ***/
                        udo_filename = fileName,
                        udo_base64filecontents = filecontents,
                        udo_claimnumber = veteran.ClaimNumber,
                        udo_filenumber = veteran.FileNumber,
                        udo_relatedentity = veteran.RelatedObject,
                        udo_vet_firstname = veteran.FirstName,
                        udo_vet_middlename = veteran.MiddleName,
                        udo_vet_lastname = veteran.LastName,
                        udo_vbmsdocument = regardingObject,
                        udo_doctypeid = veteran.docType,
                        udo_source = _source,
                        udo_subject = string.Empty,
                        udo_userRole = roleName,
                        udo_userName = userName
                    };

                    //Logger.WriteDebugMessage("UDOVBMSUploadDocumentRequest, executing request, going to wait for a response");
                    Trace("UDOVBMSUploadDocumentRequest, executing request, going to wait for a response");

                    // Utility.Send(uri, "UDOVBMSUploadDocumentAsyncRequest", request, _logSettings, 110);
                    var response = Utility.SendReceive<UDOVBMSUploadDocumentResponse>(uri, "UDOVBMSUploadDocumentRequest", request, _logSettings, 110,
                        _crmAuthTokenConfig, TracingService);
                    //Logger.WriteDebugMessage("UDOVBMSUploadDocumentRequest, executed request, received a response");
                    Trace("UDOVBMSUploadDocumentRequest, executed request, received a response");
                    entity["documentbody"] = null;
                    entity["filename"] = null;
                    entity["isdocument"] = false;

                    var vbmsDoc = new Entity("udo_vbmsdocument");
                    vbmsDoc.Id = regardingObject.Id;
                    vbmsDoc["udo_exceptionmessage"] = response.ExceptionMessage;
                    vbmsDoc["udo_exceptionoccured"] = response.ExceptionOccured;

                    DateTime uploadDate = DateTime.Now; // Equates to UTC time on server
                    if (uploadDate.Hour >= 0 && uploadDate.Hour < 5)
                    {
                        uploadDate = DateTime.UtcNow.Subtract(new TimeSpan(5, 0, 0));
                        Trace("VBMS upload date adjusted to reflect actual date of " + uploadDate.ToString());
                    } else
                    {
                        Trace("VBMS upload date: " + uploadDate.ToString());
                    }
                    vbmsDoc["udo_vbmsuploaddate"] = uploadDate;
                 
                    OrganizationService.Update(vbmsDoc);

                    Trace("UDOVBMSUploadDocumentRequest, Updated the vbms_record");

                    if (response.ExceptionOccured)
                    {
                        // Notify client an issue occurred with the VBMS upload
                        throw new Exception("An unexpected error occurred during the VBMS document upload.  Please check VBMS eFolder.", new Exception(response.ExceptionMessage));
                    }
                }
                catch (Exception ex)
                {
                    PluginError = true;
                    throw new InvalidPluginExecutionException(ex.Message);
                }

                txnTimer.Stop();
            }
            catch (InvalidPluginExecutionException ex)
            {
                PluginError = true;
                // Pass all invalidpluginexceptions
                throw ex;
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                PluginError = true;
                //Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage + ex.Message);
            }
            catch (Exception ex)
            {
                PluginError = true;
                //Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage + ex.Message);
            }
            finally
            {
                Trace("Entered Finally");
                SetupLogger();
                Trace("Set up logger done.");
                ExecuteFinally();
                Trace("Exit Finally");
            }
        }

        #region VIMT Settings
        internal void getSettingValues()
        {
            _logTimer = McsSettings.GetSingleSetting<bool>(_logTimerField);
            _logSoap = McsSettings.GetSingleSetting<bool>(_logSoapField);
            _uri = McsSettings.GetSingleSetting<string>(_vimtRestEndpointField);
            _debug = McsSettings.GetSingleSetting<bool>(_debugField);
            string parentAppId = McsSettings.GetSingleSetting<string>("udo_oauthresourceid");
            string clientAppId = McsSettings.GetSingleSetting<string>("udo_oauthclientid");
            string clientSecret = McsSettings.GetSingleSetting<string>("udo_oauthclientsecret");
            string tenentId = McsSettings.GetSingleSetting<string>("udo_aadtenent");
            string apimsubscriptionkey = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkey");
            string apimsubscriptionkeyS = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkeysouth");
            string apimsubscriptionkeyE = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkeyeast");
            //Create the token from settings
            _crmAuthTokenConfig = new CRMAuthTokenConfiguration
            {
                ParentApplicationId = parentAppId,
                ClientApplicationId = clientAppId,
                ClientSecret = clientSecret,
                TenantId = tenentId,
                ApimSubscriptionKey = apimsubscriptionkey,
                ApimSubscriptionKeyS = apimsubscriptionkeyS,
                ApimSubscriptionKeyE = apimsubscriptionkeyE
            };

            try
            {

                if (_debug)
                {

                    Trace("CRMAuthTokenConfiguration : " + JsonHelper.Serialize<CRMAuthTokenConfiguration>(_crmAuthTokenConfig));

                }
            }
            catch (Exception e)
            {
                PluginError = true;
                Trace(e.Message);
            }


        }

        internal HeaderInfo GetHeaderInfo()
        {
            ColumnSet userCols = new ColumnSet("va_stationnumber", "va_wsloginname", "va_applicationname", "va_ipaddress", "va_pcrssn");
            Entity thisUser = OrganizationService.Retrieve("systemuser", PluginExecutionContext.UserId, userCols);

            const string stationNumberIsNotAssignedForCrmUser = "Station Number is not assigned for CRM User.";
            const string vaStationnumber = "va_stationnumber";

            if (!thisUser.Attributes.ContainsKey(vaStationnumber))
                throw new Exception(stationNumberIsNotAssignedForCrmUser);

            const string wsLoginIsNotAssignedForCrmUser = "WS Login is not assigned for CRM User.";
            const string vaWsloginname = "va_wsloginname";

            if (!thisUser.Attributes.ContainsKey(vaWsloginname))
                throw new Exception(wsLoginIsNotAssignedForCrmUser);

            const string applicationNameIsNotAssignedForCrmUser = "Application Name is not assigned for CRM User.";
            const string vaApplicationname = "va_applicationname";

            if (!thisUser.Attributes.ContainsKey(vaApplicationname))
                throw new Exception(applicationNameIsNotAssignedForCrmUser);

            const string clientMachineIsNotAssignedForCrmUser = "Client Machine is not assigned for CRM User.";
            const string vaIpAddress = "va_ipaddress";

            if (!thisUser.Attributes.ContainsKey(vaIpAddress))
                throw new Exception(clientMachineIsNotAssignedForCrmUser);

            var stationNumber = (string)thisUser[vaStationnumber];
            var loginName = (string)thisUser[vaWsloginname];
            var applicationName = (string)thisUser[vaApplicationname];
            var clientMachine = (string)thisUser[vaIpAddress];

            return new HeaderInfo
            {
                StationNumber = stationNumber,
                LoginName = loginName,
                ApplicationName = applicationName,
                ClientMachine = clientMachine
            };
        }
        #endregion
    }
}