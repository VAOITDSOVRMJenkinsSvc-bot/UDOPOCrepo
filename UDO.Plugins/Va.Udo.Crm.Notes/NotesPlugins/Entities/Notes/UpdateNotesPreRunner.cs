using System;
using System.Linq;
using MCSPlugins;
using MCSUtilities2011;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk.Query;
using VRM.Integration.UDO.Notes.Messages;
using VRMRest;
//using UDO.Model;
using System.ServiceModel;
using System.Diagnostics;
using UDO.LOB.Core;
/// <summary>
/// VIMT LOB Component for UDOcreateAwardAdjustment,createAwardAdjustment method, PluginRunner.
/// Code Generated by IMS on: 6/4/2015 9:39:25 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Notes.Plugins
{
    internal class UpdateNotesPreRunner : PluginRunner
    {

        bool _logSoap = false;
        bool _logTimer = false;
        string _uri = "";
        private const string _vimtRestEndpointField = "crme_restendpointforvimt";
        private CRMAuthTokenConfiguration _crmAuthTokenConfig;
        
        public UpdateNotesPreRunner(IServiceProvider serviceProvider)
            : base(serviceProvider)
        { }
        public override Entity GetPrimaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override Entity GetSecondaryEntity()
        {
            return PluginExecutionContext.PreEntityImages["Pre"] as Entity;
        }
        public override string McsSettingsDebugField
        {
            get { return "udo_notes"; }
        }
        internal void Execute(IServiceProvider serviceProvider)
        {
            try
            {
                if (!PluginExecutionContext.MessageName.Equals("Update")) return;

                var entity = GetPrimaryEntity();

                if (entity != null && !entity.GetAttributeValue<bool>("udo_editable") && !entity.GetAttributeValue<bool>("udo_fromudo"))
                {
                    #region Allow delete of notes when it is the child object of the deletion
                    if (PluginExecutionContext.ParentContext != null &&
                        !PluginExecutionContext.ParentContext.PrimaryEntityName.Equals("udo_note"))
                    {
                        //Logger.WriteDebugMessage("parent no udo_note and IgnoreDepth not found");
                        TracingService.Trace("parent no udo_note and IgnoreDepth not found");
                        return;
                    }
                    #endregion

                    if (PluginExecutionContext.Depth > 1)
                    {
                        return;
                    }
                }
                // Logger.WriteDebugMessage("Starting update note");
                Stopwatch txnTimer = Stopwatch.StartNew();
                //var entity = GetPrimaryEntity();

                if (entity == null)
                {
                    throw new InvalidPluginExecutionException("Target entity is null");
                }
                    
                var _veteranId = McsHelper.getEntRefID("udo_veteranid");
                //Logger.WriteDebugMessage("_veteranId:" + _veteranId);

                var _PID = McsHelper.getStringValue("udo_participantid");
                TracingService.Trace("_PID:" + _PID);
                //Logger.WriteDebugMessage("_PID:" + _PID);
               
                var _dtTime = McsHelper.getDateTimeValue("udo_dttime");
                //Logger.WriteDebugMessage("_dttime:" + _dtTime.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ssK"));
                TracingService.Trace("_dttime:" + _dtTime.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ssK"));

                // This is only present on much older records, since we can only update
                // the past 24 hours, don't use this value.
                // var _datetime = McsHelper.getStringValue("udo_datetime");
                // Logger.WriteDebugMessage("_datetime:" + _datetime);

                var noteid = McsHelper.getStringValue("udo_legacynoteid");
                //Logger.WriteDebugMessage("noteid:" + noteid);
                TracingService.Trace("noteid:" + noteid);

                if (_dtTime==null && noteid == null)
                {
                    throw new InvalidPluginExecutionException("customThere must be a note id of note or the create date must be present for the request");
                }
                var nowminus24 = DateTime.Now;

                nowminus24 = nowminus24.AddHours(-24);

                if (_dtTime < nowminus24)
                {
                    throw new InvalidPluginExecutionException("customYou can't Update a note that is > 24 hours old.");
                }
                if (!entity.Attributes.Contains("udo_notetext"))
                {
                    Logger.WriteToFile("No updated note found, can't update note");
                    TracingService.Trace("No updated note found, can't update note");
                    return;
                }

                getSettingValues();
                HeaderInfo HeaderInfo = GetHeaderInfo();

                //var userid = McsHelper.getStringValue("udo_userid");
                //if (userid!=null && userid.Contains('(')  && userid.Contains(')'))
                //{
                //    userid = userid.Split('(',')')[1];
                //}
                //var login = HeaderInfo.LoginName;
                //if (login != null && login.Contains('(')  && login.Contains(')'))
                //{
                //    login = login.Split('(',')')[1];
                //}
                //if (userid!=null && login!=null && !String.Equals(userid, login, StringComparison.InvariantCultureIgnoreCase))
                ////if (_pcrspid != userid)
                //{
                //    // This check will need to be moved to the LOB.
                //    throw new InvalidPluginExecutionException("customOnly the original User can update a note");
                //}

                // It has to be the same user, so we can keep the current stationNumber.
                var stationNumber = McsHelper.getStringValue("udo_ro");
                if (String.IsNullOrWhiteSpace(stationNumber)) stationNumber = HeaderInfo.StationNumber;

                var request = new UDOUpdateNoteRequest()
                {
                    MessageId = Guid.NewGuid().ToString(),
                    LegacyServiceHeaderInfo = HeaderInfo,
                    udo_User = McsHelper.getStringValue("udo_userid"),
                    udo_ClaimId = McsHelper.getStringValue("udo_claimid"),
                    udo_Note = McsHelper.getStringValue("udo_notetext"),
                    udo_ParticipantID = McsHelper.getStringValue("udo_participantid"),
                    udo_RO = stationNumber,
                    udo_LegacyNoteId = noteid,
                    udo_dtTime = _dtTime.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ssK"),
                    
                    //String.IsNullOrWhiteSpace(_datetime) ? _dtTime.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ssK") : _datetime,
                    
                    Debug = McsSettings.getDebug,
                    LogSoap = _logSoap,
                    LogTiming = _logTimer,
                    UserId = PluginExecutionContext.UserId,
                    OrganizationName = PluginExecutionContext.OrganizationName
                };
                
                //   Logger.WriteDebugMessage("Request Created");
              
                LogSettings _logSettings = new LogSettings() { 
                    Org = PluginExecutionContext.OrganizationName, 
                    ConfigFieldName = "RESTCALL", 
                    UserId = PluginExecutionContext.UserId,
                    callingMethod = "UpdateNotesPre"
                };

                Uri uri = new Uri(_uri);


                if (string.IsNullOrEmpty(_uri))
                {
                    Logger.WriteToFile("NO URI FOUND, cannot call VIMT");
                    TracingService.Trace("NO URI FOUND, cannot call VIMT");
                    return;
                }

                //Logger.WriteDebugMessage("Sending UDOUpdateNoteRequest");
                TracingService.Trace("Sending UDOUpdateNoteRequest");
                var response = Utility.SendReceive<UDOUpdateNoteResponse>(uri, "UDOUpdateNoteRequest", request, 
                    _logSettings, 0, _crmAuthTokenConfig, TracingService);
                   // Logger.WriteDebugMessage("back from EC");
                entity["udo_editable"] = true; // Allow immediate editing of modified note.
                //Logger.WriteDebugMessage("response:" + response.ExceptionOccured);
                txnTimer.Stop();

                //Logger.WriteTxnTimingMessage("UpdateNotes", txnTimer.ElapsedMilliseconds);


            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                if (!ex.Message.StartsWith("custom"))
                {

                    Logger.WriteToFile(ex.Message);
                    throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
                }
                throw new InvalidPluginExecutionException(ex.Message.Substring(6));

            }
            catch (Exception ex)
            {
                if (!ex.Message.StartsWith("custom"))
                {

                    Logger.WriteToFile(ex.Message);
                    throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
                }
                throw new InvalidPluginExecutionException(ex.Message.Substring(6));
            }
        }

        private void LogContextInfo(IPluginExecutionContext o)
        {
            var detail = "Shared Variable Keys: ";
            foreach (var item in o.SharedVariables.Keys)
            {
                detail += ", " + item;
            }

            var inputkeys = "Input Keys: ";
            foreach (var item in o.InputParameters.Keys)
	        {
		        inputkeys +=", " + item;
	        }

            detail = String.Format("Depth{3}: {0}\r\n{1}\r\nOwning Extension Name{2}\r\n{4}", o.PrimaryEntityName, detail,
                o.OwningExtension.Name, o.Depth, inputkeys
                );

            //Logger.WriteDebugMessage(detail);
            TracingService.Trace(detail);
        }

        internal void getSettingValues()
        {
            _logTimer = McsSettings.GetSingleSetting<bool>("udo_noteslogtimer");
            _logSoap = McsSettings.GetSingleSetting<bool>("udo_noteslogsoap");

            _uri = McsSettings.GetSingleSetting<string>(_vimtRestEndpointField);

            string parentAppId = McsSettings.GetSingleSetting<string>("udo_oauthresourceid");
            string clientAppId = McsSettings.GetSingleSetting<string>("udo_oauthclientid");
            string clientSecret = McsSettings.GetSingleSetting<string>("udo_oauthclientsecret");
            string tenentId = McsSettings.GetSingleSetting<string>("udo_aadtenent");
            string apimsubscriptionkey = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkey");
            string apimsubscriptionkeyS = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkeysouth");
            string apimsubscriptionkeyE = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkeyeast");

            //Create the token from settings
            _crmAuthTokenConfig = new CRMAuthTokenConfiguration
            {
                ParentApplicationId = parentAppId,
                ClientApplicationId = clientAppId,
                ClientSecret = clientSecret,
                TenantId = tenentId,
                ApimSubscriptionKey = apimsubscriptionkey,
                ApimSubscriptionKeyS = apimsubscriptionkeyS,
                ApimSubscriptionKeyE = apimsubscriptionkeyE
            };
        }

        internal HeaderInfo GetHeaderInfo()
        {
            ColumnSet userCols = new ColumnSet("va_stationnumber", "va_wsloginname", "va_applicationname", "va_ipaddress", "va_pcrssn");
            Entity thisUser = OrganizationService.Retrieve("systemuser", PluginExecutionContext.UserId, userCols);

            const string stationNumberIsNotAssignedForCrmUser = "Station Number is not assigned for CRM User.";
            const string vaStationnumber = "va_stationnumber";

            if (!thisUser.Attributes.ContainsKey(vaStationnumber))
                throw new Exception(stationNumberIsNotAssignedForCrmUser);

            const string wsLoginIsNotAssignedForCrmUser = "WS Login is not assigned for CRM User.";
            const string vaWsloginname = "va_wsloginname";

            if (!thisUser.Attributes.ContainsKey(vaWsloginname))
                throw new Exception(wsLoginIsNotAssignedForCrmUser);

            const string applicationNameIsNotAssignedForCrmUser = "Application Name is not assigned for CRM User.";
            const string vaApplicationname = "va_applicationname";

            if (!thisUser.Attributes.ContainsKey(vaApplicationname))
                throw new Exception(applicationNameIsNotAssignedForCrmUser);

            const string clientMachineIsNotAssignedForCrmUser = "Client Machine is not assigned for CRM User.";
            const string vaIpAddress = "va_ipaddress";

            if (!thisUser.Attributes.ContainsKey(vaIpAddress))
                throw new Exception(clientMachineIsNotAssignedForCrmUser);

            var stationNumber = (string)thisUser[vaStationnumber];
            var loginName = (string)thisUser[vaWsloginname];
            var applicationName = (string)thisUser[vaApplicationname];
            var clientMachine = (string)thisUser[vaIpAddress];

            return new HeaderInfo
            {
                StationNumber = stationNumber,
                LoginName = loginName,
                ApplicationName = applicationName,
                ClientMachine = clientMachine
            };
        }
    }
}