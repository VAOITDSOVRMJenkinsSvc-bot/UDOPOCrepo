using System;
using System.Linq;
using MCSPlugins;
using MCSUtilities2011;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk.Query;
using VRM.Integration.UDO.Notes.Messages;
using UDO.Model;
using VRMRest;
using UDO.LOB.Core;
using System.ServiceModel;
using System.Diagnostics;
/// <summary>
/// VIMT LOB Component for UDOcreateAwardAdjustment,createAwardAdjustment method, PluginRunner.
/// Code Generated by IMS on: 6/4/2015 9:39:25 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Notes.Plugins
{
    internal class CreateNotesPreRunner : PluginRunner
    {
        bool _logSoap = false;
        bool _logTimer = false;
        string _pcrspid = "";
        string _uri = "";
        private const string _vimtRestEndpointField = "crme_restendpointforvimt";
        private CRMAuthTokenConfiguration _crmAuthTokenConfig;
        const string Query = "Query";
        bool isFromUDO = false;
        public CreateNotesPreRunner(IServiceProvider serviceProvider)
            : base(serviceProvider)
        { }
        public override Entity GetPrimaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override Entity GetSecondaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override string McsSettingsDebugField
        {
            get { return "udo_notes"; }
        }
        internal void Execute(IServiceProvider serviceProvider)
        {
            try
            {

                #region Get Note Target

                var entity = GetPrimaryEntity();

                if (entity == null)
                {
                    throw new InvalidPluginExecutionException("Target entity is null");
                }
                if (!String.Equals(entity.LogicalName, "udo_note", StringComparison.InvariantCultureIgnoreCase))
                {
                    throw new InvalidPluginExecutionException("Target entity is not a note");
                }
                if (!entity.Contains("udo_fromudo") || !entity.GetAttributeValue<bool>("udo_fromudo"))
                {
                    return;
                }

                _pcrspid = string.Empty;
                Stopwatch txnTimer = Stopwatch.StartNew();

                var note = GetPrimaryEntity().ToEntity<udo_note>();
                //Entity note = GetPrimaryEntity();                
                #endregion
                if (note.udo_fromUDO == true)
                {
                    isFromUDO = true;
                    #region Verify udo_veteranid, udo_personid or udo_participantid, and udo_notetext are not null
                    if (!note.Attributes.Contains("udo_veteranid"))
                    {
                        throw new InvalidPluginExecutionException("Veteran not specified, can't create note");
                    }

                    if (!note.Attributes.Contains("udo_personid") || note.udo_personId == null)
                    {
                        if (!note.Contains("udo_participantid") || String.IsNullOrEmpty(note.udo_ParticipantID))
                        {
                            throw new InvalidPluginExecutionException("Person not specified, can't create note");
                        }
                    }

                    if (!note.Attributes.Contains("udo_notetext"))
                    {
                        throw new InvalidPluginExecutionException("customNote empty, can't create an empty note");
                        //return;
                    }
                    #endregion

                    #region Check for PID (retrieve using person if needed)
                    var person = GetPerson(note.GetAttributeValue<EntityReference>("udo_personid").Id);

                    // Must have a person to create notes
                    if (person == null) return;
                    if (!note.Attributes.Contains("udo_participantid"))
                    {
                        note.udo_ParticipantID = person.GetAttributeValue<string>("udo_ptcpntid");
                    }

                    //var crmUser = OrganizationService.Retrieve("systemuser", PluginExecutionContext.UserId, new ColumnSet("va_pcrssn"));
                    //if (crmUser.Contains("va_pcrssn")) _pcrspid = crmUser["va_pcrssn"].ToString();

                    // copy owner
                    //note.OwnerId = person.GetAttributeValue<EntityReference>("ownerid");

                    if (String.IsNullOrEmpty(note.udo_ParticipantID))
                    {
                        throw new InvalidPluginExecutionException("Person invalid, can't create note");
                    }
                    #endregion

                    // Get request and header
                    getSettingValues();

                    #region debug show entity submitted
                    if (McsSettings.getDebug)
                    {
                        string attributeData = "";
                        foreach (string key in note.Attributes.Keys)
                        {

                            var attr = note[key];
                            string value;
                            if (attr == null)
                            {
                                value = "<NULL>";
                            }
                            else if (attr is EntityReference)
                            {
                                var attrEr = (EntityReference)attr;
                                value = String.Format("EntityReference - entity:{0} id:{1}", attrEr.LogicalName, attrEr.Id);
                                if (!String.IsNullOrEmpty(attrEr.Name)) value += " - " + attrEr.Name;
                            }
                            else if (attr is OptionSetValue)
                            {
                                var attrOptionSet = (OptionSetValue)attr;
                                value = String.Format("OptionSetValue: {0}", attrOptionSet.Value);
                            }
                            else
                            {
                                value = String.Format("{0}", attr); // String.Format handles undefined vars.
                            }
                            attributeData += String.Format("{0} = {1}\r\n", key, value);
                        }
                        //Logger.WriteDebugMessage("{3}: Attempting to create {4}...\r\n{1}\r\n{0}{2}", attributeData, "{", "}", "CreateNotesPreRunner", "note");
                        TracingService.Trace("{3}: Attempting to create {4}...\r\n{1}\r\n{0}{2}", attributeData, "{", "}", "CreateNotesPreRunner", "note");
                    }
                    #endregion

                    HeaderInfo HeaderInfo = GetHeaderInfo();

                    var stationNumber = "";
                    if (note.Attributes.Contains("udo_ro") && !String.IsNullOrEmpty((string)note.udo_RO))
                    {
                        stationNumber = note.udo_RO;
                    }
                    else
                    {
                        stationNumber = HeaderInfo.StationNumber;
                    }

                    var dateTime = string.Empty;
                    if (note.Attributes.Contains("udo_datetime") && !String.IsNullOrEmpty((string)note.udo_DateTime))
                    {
                        dateTime = note.udo_DateTime;
                    }

                    // Build LOB Request
                    var request = new UDOCreateNoteRequest()
                    {
                        LegacyServiceHeaderInfo = HeaderInfo,
                        //MessageId = Guid.NewGuid().ToString(),
                        MessageId = PluginExecutionContext.CorrelationId.ToString(),
                        Debug = McsSettings.getDebug,
                        //udo_ClaimId = note.udo_ClaimId,
                        udo_Note = note.udo_NoteText,
                        udo_ParticipantID = note.udo_ParticipantID,
                        udo_RO = stationNumber,
                        //udo_User = _pcrspid,
                        udo_DateTime = dateTime,//DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz"),
                        LogSoap = _logSoap,
                        LogTiming = _logTimer,
                        UserId = PluginExecutionContext.UserId,
                        OrganizationName = PluginExecutionContext.OrganizationName
                    };

                    Guid userid = Guid.Empty;
                    var owner = note.OwnerId;

                    if (Guid.TryParse(note.udo_userid, out userid))
                    {
                        request.UserId = userid;
                    }
                    else if (owner != null && owner.LogicalName == "systemuser")
                    {
                        request.UserId = owner.Id;
                    }
                    else
                    {
                        request.UserId = PluginExecutionContext.UserId;
                    }

                    //   Logger.WriteDebugMessage("Request Created");
                    LogSettings _logSettings = new LogSettings()
                    {
                        Org = PluginExecutionContext.OrganizationName,
                        ConfigFieldName = "RESTCALL",
                        UserId = PluginExecutionContext.UserId,
                        callingMethod = "CreateNotesPre"
                    };

                    Uri uri = new Uri(_uri);

                    if (string.IsNullOrEmpty(_uri))
                    {
                        Logger.WriteToFile("NO URI FOUND, cannot call VIMT");
                        Trace("NO URI FOUND, cannot call VIMT");
                        return;
                    }

                    note.udo_fromUDO = false;
                    note.udo_name = "Note Detail";

                    //Logger.WriteDebugMessage("Request Data");
                    //Logger.WriteDebugMessage("ptcpntid :" + request.udo_ParticipantID);
                    //Logger.WriteDebugMessage("userid: " + request.UserId);
                    //Logger.WriteDebugMessage("note text " + request.udo_Note);
                    Trace("ptcpntid :" + request.udo_ParticipantID);
                    Trace("note text " + request.udo_Note);

                    var response = Utility.SendReceive<UDOCreateNoteResponse>(uri, "UDOCreateNoteRequest", request,
                        _logSettings, 0, _crmAuthTokenConfig, TracingService);
                    // Logger.WriteDebugMessage("back from EC");

                    if (response.UDOCreateNoteInfo != null)
                    {
                        #region success
                        var createInfo = response.UDOCreateNoteInfo;
                        note.udo_editable = true; // allow edit of new note

                        if (!String.IsNullOrEmpty(createInfo.udo_ClaimId))
                        {
                            note.udo_ClaimId = createInfo.udo_ClaimId;
                        }


                        Trace("date response " + dateTime);
                        try
                        {
                            DateTime parsedDate = DateTime.Parse((!string.IsNullOrEmpty(dateTime)) ? dateTime : createInfo.udo_DateTime, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal | System.Globalization.DateTimeStyles.AdjustToUniversal);

                            Trace("parsed dt " + parsedDate);
                            Trace("parsed dt type " + parsedDate.Kind);
                            note.udo_dtTime = parsedDate;
                        }
                        catch (Exception ex)
                        {
                            PluginError = true;
                            Trace("Error: " + ex.Message);
                        }
                        note.udo_NoteText = createInfo.udo_Note;
                        note.udo_RO = createInfo.udo_RO;
                        note.udo_Type = createInfo.udo_Type;
                        if (createInfo.udo_SuspenseDate != null)
                        {
                            DateTime suspenseDate = DateTime.Parse(createInfo.udo_SuspenseDate);
                            if (suspenseDate >= new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc))
                            {

                                note.udo_SuspenseDate = suspenseDate;
                            }
                        }
                        note.udo_User = createInfo.udo_User;
                        if (!String.IsNullOrEmpty(createInfo.udo_UserId))
                        {
                            note.udo_userid = createInfo.udo_UserId;
                        }
                        if (!String.IsNullOrEmpty(createInfo.udo_legacynoteid))
                        {
                            note.udo_legacynoteid = createInfo.udo_legacynoteid;
                        }
                        #endregion
                    }
                    else
                    {
                        note.udo_dtTime = DateTime.Now;

                        #region failure
                        var message = "The note was not saved.  ";
                        if (response.ExceptionOccured)
                        {
                            message = String.Format("{0}An Error occurred in UDOCreateNote: {1}", message, response.ExceptionMessage);
                        }
                        else
                        {
                            message += "Please contact an adminsitrator to verify you have the propper permissions to create notes and have a valid participant id on your user profile.";
                        }
                        var ex = new Exception(message);
                        //Logger.WriteException(ex);

                        //message = message + "\r\nThe response did not contain the note information that was used to create the record, which likely means there was a problem creating the note in UDOCreateNote.";
                        throw new InvalidPluginExecutionException("custom" + message);
                        #endregion
                    }

                    //Logger.WriteDebugMessage("response:" + response.ExceptionOccured);
                    txnTimer.Stop();

                    //Logger.WriteTxnTimingMessage("CreateNotes", txnTimer.ElapsedMilliseconds);
                    TracingService.Trace("CreateNotes", txnTimer.ElapsedMilliseconds);
                }

            }
            catch (InvalidPluginExecutionException ex)
            {
                PluginError = true;
                // Pass all invalidpluginexceptions
                throw ex;
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                PluginError = true;
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
            catch (Exception ex)
            {
                PluginError = true;
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
            finally
            {
                Trace("Entered Finally");
                SetupLogger();
                Trace("Set up logger done.");
                if (isFromUDO == true)
                {
                    ExecuteFinally();
                    Trace("Exit Finally");
                }
                else
                {
                    Trace(" Did not execute finally as the isFromUDO = false.");
                }                
            }
        }

        private Entity GetPerson(Guid personid)
        {
            // Logger.WriteToFile("Retrieving person to obtain participantid.");
            var fetch = "<fetch count='1'><entity name='udo_person'>" +
                        "<attribute name='udo_personid'/>" +
                        "<attribute name='udo_ptcpntid'/>" +
                        "<attribute name='ownerid'/>" +
                        "<filter type='and'>" +
                        "<condition attribute='udo_personid' operator='eq' value='" + personid.ToString() + "'/>" +
                        "</filter></entity></fetch>";


            var people = OrganizationService.RetrieveMultiple(new FetchExpression(fetch));
            if (people != null && people.Entities.Count == 1)
            {
                return people[0];
            }
            return null;
        }

        internal void getSettingValues()
        {
            _logTimer = McsSettings.GetSingleSetting<bool>("udo_noteslogtimer");
            _logSoap = McsSettings.GetSingleSetting<bool>("udo_noteslogsoap");


            _uri = McsSettings.GetSingleSetting<string>(_vimtRestEndpointField);

            string parentAppId = McsSettings.GetSingleSetting<string>("udo_oauthresourceid");
            string clientAppId = McsSettings.GetSingleSetting<string>("udo_oauthclientid");
            string clientSecret = McsSettings.GetSingleSetting<string>("udo_oauthclientsecret");
            string tenentId = McsSettings.GetSingleSetting<string>("udo_aadtenent");
            string apimsubscriptionkey = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkey");
            string apimsubscriptionkeyS = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkeysouth");
            string apimsubscriptionkeyE = McsSettings.GetSingleSetting<string>("udo_ocpapimsubscriptionkeyeast");
            //Create the token from settings
            _crmAuthTokenConfig = new CRMAuthTokenConfiguration
            {
                ParentApplicationId = parentAppId,
                ClientApplicationId = clientAppId,
                ClientSecret = clientSecret,
                TenantId = tenentId,
                ApimSubscriptionKey = apimsubscriptionkey,
                ApimSubscriptionKeyE = apimsubscriptionkeyE,
                ApimSubscriptionKeyS = apimsubscriptionkeyS
            };
        }

        internal HeaderInfo GetHeaderInfo()
        {


            ColumnSet userCols = new ColumnSet("va_stationnumber", "va_wsloginname", "va_applicationname", "va_ipaddress", "va_pcrssn");
            Entity thisUser = OrganizationService.Retrieve("systemuser", PluginExecutionContext.UserId, userCols);

            const string stationNumberIsNotAssignedForCrmUser = "Station Number is not assigned for CRM User.";
            const string vaStationnumber = "va_stationnumber";

            if (!thisUser.Attributes.ContainsKey(vaStationnumber))
                throw new Exception(stationNumberIsNotAssignedForCrmUser);

            const string wsLoginIsNotAssignedForCrmUser = "WS Login is not assigned for CRM User.";
            const string vaWsloginname = "va_wsloginname";

            if (!thisUser.Attributes.ContainsKey(vaWsloginname))
                throw new Exception(wsLoginIsNotAssignedForCrmUser);

            const string applicationNameIsNotAssignedForCrmUser = "Application Name is not assigned for CRM User.";
            const string vaApplicationname = "va_applicationname";

            if (!thisUser.Attributes.ContainsKey(vaApplicationname))
                throw new Exception(applicationNameIsNotAssignedForCrmUser);

            const string clientMachineIsNotAssignedForCrmUser = "Client Machine is not assigned for CRM User.";
            const string vaIpAddress = "va_ipaddress";

            if (!thisUser.Attributes.ContainsKey(vaIpAddress))
                throw new Exception(clientMachineIsNotAssignedForCrmUser);

            var stationNumber = (string)thisUser[vaStationnumber];
            var loginName = (string)thisUser[vaWsloginname];
            var applicationName = (string)thisUser[vaApplicationname];
            var clientMachine = (string)thisUser[vaIpAddress];

            return new HeaderInfo
            {
                StationNumber = stationNumber,
                LoginName = loginName,
                ApplicationName = applicationName,
                ClientMachine = clientMachine
            };
        }
    }
}