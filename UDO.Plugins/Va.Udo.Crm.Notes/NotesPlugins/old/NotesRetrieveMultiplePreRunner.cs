using System;
using System.Linq;
using MCSPlugins;
using MCSUtilities2011;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk.Query;
using VRM.Integration.UDO.Notes.Messages;
using VRMRest;
using System.Diagnostics;
using Xrm;
using System.ServiceModel;
using Microsoft.Crm.Sdk.Messages;
/// <summary>
/// VIMT LOB Component for UDOcreateAwardAdjustment,createAwardAdjustment method, PluginRunner.
/// Code Generated by IMS on: 6/4/2015 9:39:25 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Notes.Plugins
{
    internal class NotesRetrieveMultiplePreRunner : PluginRunner
    {
        
        bool _logSoap = false;
        bool _logTimer = false;
        Guid _veteranId = new Guid();
        EntityReference _owner = null;

        Int64 _PID = 0;
        string _uri = "";
        const string Query = "Query";
        public NotesRetrieveMultiplePreRunner(IServiceProvider serviceProvider)
            : base(serviceProvider)
        { }
        public override Entity GetPrimaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override Entity GetSecondaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override string McsSettingsDebugField
        {
            get { return "udo_notes"; }
        }
        internal void Execute()
        {
            return; //Plugin nolonger in use.
            if (!PluginExecutionContext.InputParameters.Contains(Query)) return;
            
            try
            {
                // Start Timer
                Stopwatch txnTimer = Stopwatch.StartNew();

                #region Commented out code to modify a fetchExpression
                // Logger.WriteDebugMessage("Starting Retrieve for notes Details");
                //if (PluginExecutionContext.InputParameters[Query] is FetchExpression)
                //{
                //    var fe = (FetchExpression)PluginExecutionContext.InputParameters[Query];
                //    Logger.WriteDebugMessage("Fetch Expression : \r\n\r\n{0}", fe.Query);
                    
                //    if (UpdateTimeSpanFetch(fe)) {
                //        Logger.WriteDebugMessage("Modified Fetch To: \r\n\r\n{0}", fe.Query);
                //    }
                //    return;
                //}
                #endregion

                if (!(PluginExecutionContext.InputParameters[Query] is QueryExpression)) return;
                                
                //QueryExpression
                //TODO This code will never run if the target contains a fetchexpression
                var qe = (QueryExpression)PluginExecutionContext.InputParameters[Query];

                /*
                if (UpdateTimeSpanQuery(qe)) {
                    // These views use QueryExpression
                    //Logger.WriteDebugMessage("Updated Query Expression Time Span");
                }
                 

                // Don't bother checking for pages beyond page 1.  Page 1 triggers load, why try on others.
                if (qe.PageInfo != null && qe.PageInfo.PageNumber > 1) return;
                // Only top level needs to be processed further
                //if (PluginExecutionContext.Depth > 1) return; 
                */

                var request = new UDORetrieveNotesRequest();
                if (findParentId(request, qe))
                {
                    // Logger.WriteDebugMessage("request.udo_personId:" + request.udo_personId);
                    if (didWeNeedData(request.udo_personId))
                    {
                        getSettingValues();

                        //  Logger.WriteDebugMessage("getDebug:" + McsSettings.getDebug);
                        var veteranReference = new UDORetrieveNotesRelatedEntitiesMultipleRequest()
                        {
                            RelatedEntityFieldName = "udo_veteranid",
                            RelatedEntityId = _veteranId,
                            RelatedEntityName = "contact"
                        };
                        var udo_personReference = new UDORetrieveNotesRelatedEntitiesMultipleRequest()
                        {
                            RelatedEntityFieldName = "udo_personid",
                            RelatedEntityId = request.udo_personId,
                            RelatedEntityName = "udo_person"
                        };
                        var references = new[] { veteranReference, udo_personReference };
                        request.owner = _owner;
                        request.UDORetrieveNotesRelatedEntitiesInfo = references;
                        HeaderInfo HeaderInfo = GetHeaderInfo();
                        request.LegacyServiceHeaderInfo = HeaderInfo;
                        request.MessageId = Guid.NewGuid().ToString();
                        request.Debug = McsSettings.getDebug;
                        //Logger.WriteDebugMessage("_PID:" + _PID);
                        request.ptcpntId = _PID;
                        request.RelatedParentEntityName = "udo_person";
                        request.RelatedParentFieldName = "udo_personid";
                        request.RelatedParentId = request.udo_personId;
                        request.LogSoap = _logSoap;
                        request.LogTiming = _logTimer;
                        request.UserId = PluginExecutionContext.InitiatingUserId;
                        request.OrganizationName = PluginExecutionContext.OrganizationName;
                        //   Logger.WriteDebugMessage("Request Created");
                        LogSettings _logSettings = new LogSettings() { Org = PluginExecutionContext.OrganizationName, ConfigFieldName = "RESTCALL", UserId = PluginExecutionContext.InitiatingUserId };

                        Uri uri = new Uri(_uri);


                        if (string.IsNullOrEmpty(_uri))
                        {
                            Logger.WriteToFile("NO URI FOUND, cannot call VIMT");
                            return;
                        }
                        
                        var response = Utility.SendReceive<UDORetrieveNotesResponse>(uri, "UDORetrieveNotesRequest", request, _logSettings);
                        Logger.WriteDebugMessage("Saved TotalRecords: {0} to SharedVariables", response.RecordCount);
                        PluginExecutionContext.SharedVariables.Add("TotalRecords", response.RecordCount);
                    }
                }


                txnTimer.Stop();

                Logger.WriteTxnTimingMessage("NotesRetrieveMultiple", txnTimer.ElapsedMilliseconds);
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
            catch (Exception ex)
            {
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
        }

        //private bool UpdateTimeSpanFetch(FetchExpression fe)
        //{
        //    var query = fe.Query;
        //    var now = DateTime.Now;
        //    string condition = "<condition attribute=\"udo_dttime\" operator=\"on-or-{0}\" value=\"{1}\" />";

        //    string before = string.Empty, after = string.Empty, key = string.Empty;

        //    if (query.Contains(String.Format(condition, "before", "1900-01-01")))
        //    {
        //        before = now.AddDays(-90).ToString("yyyy-MM-dd");
        //        after = now.AddDays(-120).ToString("yyyy-MM-dd");
        //        key = "1900-01-01";
        //    }
        //    else if (query.Contains(String.Format(condition, "before", "1900-01-02")))
        //    {
        //        before = now.AddDays(-120).ToString("yyyy-MM-dd");
        //        after = now.AddDays(-180).ToString("yyyy-MM-dd");
        //        key = "1900-01-02";
        //    }
        //    else if (query.Contains(String.Format(condition, "before", "1900-01-03")))
        //    {
        //        before = now.AddDays(-180).ToString("yyyy-MM-dd");
        //        key = "1900-01-02";
        //    }
        //    if (String.IsNullOrEmpty(before)) return false;

        //    var newCondition = String.Format(condition, "before", before);
        //    if (!String.IsNullOrEmpty(after))
        //    {
        //        newCondition = newCondition + String.Format(condition, "after", after);
        //    }

        //    Logger.WriteDebugMessage("key: {2}\r\nbefore: {0}\r\nafter: {1}\r\n", before, after, key);

        //    fe.Query = query.Replace(string.Format(condition, "before", key), newCondition);
        //    return true;
        //}

/*        private bool UpdateTimeSpanQuery(QueryExpression qe)
        {
            var now = DateTime.Now;
            if (qe.Criteria != null)
            {
                foreach (var condition in qe.Criteria.Conditions)
                {
                    if (condition.AttributeName.ToLowerInvariant().Equals("udo_dttime") &&
                        condition.Operator == ConditionOperator.OnOrBefore && condition.Values.Count > 0)
                    {
                        var before = condition.Values[0];
                        if (before.Equals("1900-01-01T00:00:00"))
                        {
                            before = now.AddDays(-90).ToString("yyyy-MM-dd");
                            qe.Criteria.AddCondition("udo_dttime", ConditionOperator.OnOrAfter,
                                now.AddDays(-120).ToString("yyyy-MM-dd"));
                            condition.Values[0] = before;
                            return true;
                        }
                        else if (before.Equals("1900-01-02T00:00:00"))
                        {
                            before = now.AddDays(-120).ToString("yyyy-MM-dd");
                            qe.Criteria.AddCondition("udo_dttime", ConditionOperator.OnOrAfter,
                                now.AddDays(-180).ToString("yyyy-MM-dd"));
                            condition.Values[0] = before;
                            return true;
                        }
                        else if (before.Equals("1900-01-03T00:00:00"))
                        {
                            before = now.AddDays(-180).ToString("yyyy-MM-dd");
                            condition.Values[0] = before;
                            return true;
                        }
                        
                        return false;
                    }
                }
            }
            return false;
        
 */
        internal bool didWeNeedData(Guid parentId)
        {
            try
            {
                Logger.setMethod = "didWeNeedData";
                // Logger.WriteDebugMessage("Starting didWeNeedData Method");

                using (var xrm = new XrmServiceContext(OrganizationService))
                {
                    var getParent = from awd in xrm.udo_personSet
                                    join vet in xrm.ContactSet on awd.udo_veteranId.Id equals vet.ContactId.Value
                                    where awd.udo_personId.Value == parentId
                                    select new
                                    {
                                        awd.udo_notesstatus,
                                        awd.udo_ptcpntid,
                                        awd.udo_veteranId,
                                        vet.OwnerId
                                    };

                    foreach (var awd in getParent)
                    {

                        if (awd.udo_notesstatus != null && awd.udo_notesstatus.Value != 752280000)
                        {
                            //   Logger.WriteDebugMessage("udo_notesloadcomplete true");
                            Logger.setMethod = "Execute";
                            return false;
                        }

                        _owner = awd.OwnerId;
                        
                        if (awd.udo_veteranId != null)
                        {
                            _veteranId = awd.udo_veteranId.Id;
                        }
                        else
                        {
                            Logger.WriteToFile("no udo_veteranId");
                            Logger.setMethod = "Execute";
                            return false;
                        }
                        if (awd.udo_ptcpntid != null)
                        {
                            // Logger.WriteDebugMessage("awd.udo_ptcpntid:" + awd.udo_ptcpntid);
                            _PID = Convert.ToInt64(awd.udo_ptcpntid);

                        }
                        else
                        {
                            Logger.WriteToFile("no PID");
                            Logger.setMethod = "Execute";
                            return false;
                        }


                    }
                }
                //Logger.WriteDebugMessage("Ending didWeNeedData Method");
                Logger.setMethod = "Execute";
                if (_PID == 0)
                {
                    Logger.WriteToFile("no PID");
                    return false;
                }
                else
                {
                    //Logger.WriteDebugMessage("_PID in the middle didweleavedata:" + _PID);
                }

                return true;
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException("Unable to didWeNeedData due to: {0}".Replace("{0}", ex.Message));
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="qe"></param>
        internal bool findParentId(UDORetrieveNotesRequest request, QueryExpression qe)
        {
            Logger.setMethod = "SetQueryString";
            try
            {
                var result = false;

                if (qe != null && qe.Criteria != null && qe.Criteria.Conditions != null && qe.Criteria.Conditions.Count > 0)
                {
                    foreach (var condition in qe.Criteria.Conditions)
                    {
                        if (condition.AttributeName.ToLowerInvariant().Equals("udo_personid"))
                        {
                            request.udo_personId = Guid.Parse(condition.Values[0].ToString());
                            result = true;
                            break;
                        }
                    }
                }
                //   Logger.WriteDebugMessage("Ending findParentId Method");
                Logger.setMethod = "Execute";
                return result;
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(String.Format("Unable to set Query String due to: {0}", ex.Message));
            }
        }
        internal void getSettingValues()
        {
            QueryByAttribute query = new QueryByAttribute
            {
                //change these fields as required for your implementation
                ColumnSet = new ColumnSet("udo_noteslogtimer", "udo_noteslogsoap", "crme_restendpointforvimt"),
                EntityName = "mcs_setting"
            };
            query.AddAttributeValue("mcs_name", "Active Settings");

            EntityCollection results = OrganizationService.RetrieveMultiple(query);
            if (results.Entities.Count > 0)
            {
                _logTimer = (Boolean)results.Entities[0]["udo_noteslogtimer"];
                _logSoap = (Boolean)results.Entities[0]["udo_noteslogsoap"];
                _uri = results.Entities[0]["crme_restendpointforvimt"].ToString();
            }
        }
        internal HeaderInfo GetHeaderInfo()
        {
            ColumnSet userCols = new ColumnSet("va_stationnumber", "va_wsloginname", "va_applicationname", "va_ipaddress");
            Entity thisUser = OrganizationService.Retrieve("systemuser", PluginExecutionContext.InitiatingUserId, userCols);

            const string stationNumberIsNotAssignedForCrmUser = "Station Number is not assigned for CRM User.";
            const string vaStationnumber = "va_stationnumber";

            if (!thisUser.Attributes.ContainsKey(vaStationnumber))
                throw new Exception(stationNumberIsNotAssignedForCrmUser);

            const string wsLoginIsNotAssignedForCrmUser = "WS Login is not assigned for CRM User.";
            const string vaWsloginname = "va_wsloginname";

            if (!thisUser.Attributes.ContainsKey(vaWsloginname))
                throw new Exception(wsLoginIsNotAssignedForCrmUser);

            const string applicationNameIsNotAssignedForCrmUser = "Application Name is not assigned for CRM User.";
            const string vaApplicationname = "va_applicationname";

            if (!thisUser.Attributes.ContainsKey(vaApplicationname))
                throw new Exception(applicationNameIsNotAssignedForCrmUser);

            const string clientMachineIsNotAssignedForCrmUser = "Client Machine is not assigned for CRM User.";
            const string vaIpAddress = "va_ipaddress";

            if (!thisUser.Attributes.ContainsKey(vaIpAddress))
                throw new Exception(clientMachineIsNotAssignedForCrmUser);

            var stationNumber = (string)thisUser[vaStationnumber];

            var loginName = (string)thisUser[vaWsloginname];

            var applicationName = (string)thisUser[vaApplicationname];

            var clientMachine = (string)thisUser[vaIpAddress];

            

            return new HeaderInfo
            {
                StationNumber = stationNumber,

                LoginName = loginName,

                ApplicationName = applicationName,

                ClientMachine = clientMachine,

              
            };
        }
    }
}