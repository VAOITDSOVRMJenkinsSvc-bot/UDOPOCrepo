using System;
using System.Linq;
using MCSPlugins;
using MCSUtilities2011;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk.Query;
using VRM.Integration.UDO.Notes.Messages;
using VRMRest;
using System.Diagnostics;
using Xrm;
using System.ServiceModel;
using Microsoft.Crm.Sdk.Messages;
/// <summary>
/// VIMT LOB Component for UDOcreateAwardAdjustment,createAwardAdjustment method, PluginRunner.
/// Code Generated by IMS on: 6/4/2015 9:39:25 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Notes.Plugins
{
    internal class NotesRetrieveMultiplePostRunner : PluginRunner
    {
        bool _logSoap = false;
        bool _logTimer = false;
        Guid _veteranId = new Guid();

        Int64 _PID = 0;
        string _uri = "";
        const string Query = "Query";
        public NotesRetrieveMultiplePostRunner(IServiceProvider serviceProvider)
            : base(serviceProvider)
        { }
        public override Entity GetPrimaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override Entity GetSecondaryEntity()
        {
            return PluginExecutionContext.InputParameters["Target"] as Entity;
        }
        public override string McsSettingsDebugField
        {
            get { return "udo_notes"; }
        }
        internal void Execute()
        {
            return; // Plugin nolonger in use.

            if (!PluginExecutionContext.InputParameters.Contains(Query)) return;

            try
            {
                // Start Timer
                Stopwatch txnTimer = Stopwatch.StartNew();

                if (!(PluginExecutionContext.InputParameters[Query] is QueryExpression)) return;

                //QueryExpression Only
                //TODO This code will never run if the target contains a fetchexpression
                //var qe = (QueryExpression)PluginExecutionContext.InputParameters[Query];

                // Ignore unless shared variable TotalRecords exists
                // Logger.WriteDebugMessage("Checking for Shared Variable");
                if (!PluginExecutionContext.SharedVariables.Contains("TotalRecords")) return;

                var totalRecords = (int)PluginExecutionContext.SharedVariables["TotalRecords"];
                

                EntityCollection ec = (EntityCollection)PluginExecutionContext.OutputParameters["BusinessEntityCollection"];
                Logger.WriteDebugMessage("TotalRecords: {0},     Query Result Records: {1}", totalRecords, ec.TotalRecordCount);
                if (ec!=null && ec.TotalRecordCount < totalRecords)
                {

                    ec.TotalRecordCount = totalRecords;
                    ec.MoreRecords = true;
                    Logger.WriteDebugMessage("Updated TotalRecordCount: {0}, MoreRecords: true", totalRecords);
                }


                txnTimer.Stop();

                Logger.WriteTxnTimingMessage("NotesRetrieveMultiplePost", txnTimer.ElapsedMilliseconds);
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
            catch (Exception ex)
            {
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
        }
        internal void getSettingValues()
        {
            QueryByAttribute query = new QueryByAttribute
            {
                //change these fields as required for your implementation
                ColumnSet = new ColumnSet("udo_noteslogtimer", "udo_noteslogsoap", "crme_restendpointforvimt"),
                EntityName = "mcs_setting"
            };
            query.AddAttributeValue("mcs_name", "Active Settings");

            EntityCollection results = OrganizationService.RetrieveMultiple(query);
            if (results.Entities.Count > 0)
            {
                _logTimer = (Boolean)results.Entities[0]["udo_noteslogtimer"];
                _logSoap = (Boolean)results.Entities[0]["udo_noteslogsoap"];
                _uri = results.Entities[0]["crme_restendpointforvimt"].ToString();
            }
        }
     
    }
}