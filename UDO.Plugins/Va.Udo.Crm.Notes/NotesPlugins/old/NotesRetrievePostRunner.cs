using System;
using System.Linq;
using MCSPlugins;
using MCSUtilities2011;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk.Query;
using VRM.Integration.UDO.Notes.Messages;
using VRMRest;
using System.Diagnostics;
using Xrm;
using System.ServiceModel;
using Microsoft.Crm.Sdk.Messages;
/// <summary>
/// VIMT LOB Component for UDOcreateAwardAdjustment,createAwardAdjustment method, PluginRunner.
/// Code Generated by IMS on: 6/4/2015 9:39:25 AM
/// Version: 2015.06.02
/// </summary>
/// <param name=none></param>
/// <returns>none</returns>
namespace VRM.Integration.UDO.Notes.Plugins
{
    internal class NotesRetrievePostRunner : PluginRunner
    {
        private Entity _retrievedEntity;

        public NotesRetrievePostRunner(IServiceProvider serviceProvider)
            : base(serviceProvider)
        { }
        public override Entity GetPrimaryEntity()
        {
            return (Entity)PluginExecutionContext.OutputParameters["BusinessEntity"];
        }
        public override Entity GetSecondaryEntity()
        {
            if (_retrievedEntity != null) return _retrievedEntity;

            var eRef = GetPrimaryEntity().ToEntityReference();
            _retrievedEntity = OrganizationService.Retrieve(eRef.LogicalName, eRef.Id,
               new ColumnSet("udo_dttime", "udo_userid"));

            return _retrievedEntity;
        }
        public override string McsSettingsDebugField
        {
            get { return "udo_notes"; }
        }
        internal void Execute()
        {
            return; //Plugin nolonger in use
            // Logger.WriteDebugMessage("Starting Retrieve for notes Details");
            try
            {
                if (PluginExecutionContext.Depth > 1) return;

                #region Get Note
                //Stopwatch txnTimer = Stopwatch.StartNew();


                var note = GetPrimaryEntity();

                if (note == null)
                {
                    throw new InvalidPluginExecutionException("Target entity is null");
                }
                if (!String.Equals(note.LogicalName, "udo_note", StringComparison.InvariantCultureIgnoreCase))
                {
                    throw new InvalidPluginExecutionException("Target entity is not a note");
                }

                #endregion

                var last24hours = false;
                var dtTime = McsHelper.getDateTimeValue("udo_dttime");
                last24hours = (dtTime != null && dtTime >= DateTime.Now.AddHours(-24));

                bool sameuser = false;
                var uid = McsHelper.getStringValue("udo_userid");
                if (String.IsNullOrEmpty(uid))
                {
                    note["udo_editable"] = false;
                    return;
                }

                var query =
                String.Format(@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' count='1'>" +
                              @"<entity name='systemuser'><attribute name='systemuserid' /><filter type='and'>" +
                               "<condition attribute='systemuserid' operator='eq' value='{1}' />" +
                               "<condition attribute='va_pcrssn' operator='eq' value='{0}' />" +
                               "</filter></entity></fetch>", uid, PluginExecutionContext.InitiatingUserId);

                var result = this.OrganizationService.RetrieveMultiple(new FetchExpression(query));

                if (result != null && result.Entities != null && result.Entities.Count > 0)
                    sameuser = true;


                note["udo_editable"] = last24hours && sameuser;
                return;
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
            catch (Exception ex)
            {
                Logger.WriteToFile(ex.Message);
                throw new InvalidPluginExecutionException(McsSettings.getUnexpectedErrorMessage);
            }
        }
    }
}