using Microsoft.Crm.UnifiedServiceDesk.CommonUtility;
using Microsoft.Crm.UnifiedServiceDesk.Dynamics;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Va.Udo.Usd.CustomControls
{
    /// <summary>
    /// Interaction logic for GlobalKeyboardShortcut.xaml
    /// </summary>
    public partial class GlobalKeyboardShortcut : DynamicsBaseHostedControl
    {
        /// <summary>
        /// Log writer
        /// </summary>
        private TraceLogger logWriter = null;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="id"></param>
        /// <param name="applicationName"></param>
        /// <param name="initXml"></param>
        public GlobalKeyboardShortcut(Guid id, string applicationName, string initXml):
            base(id, applicationName, initXml)
        {
            InitializeComponent();
            logWriter = new TraceLogger();           
        }

        protected override void DesktopReady()
        {
            base.DesktopReady();
            RegisterGlobalShortcutKeys();
        }

        protected override void DoAction(Microsoft.Uii.Csr.RequestActionEventArgs args)
        {
            if (string.Compare(args.Action, "Refresh",true)==0)
            {
                RegisterGlobalShortcutKeys();
            }
            else if (string.Compare(args.Action, "SetFocus", true) == 0)
            {
                var parms = Utility.SplitLines(args.Data, CurrentContext, localSession);
                var controlName = Utility.GetAndRemoveParameter(parms, "controlname");

                Window mainWindow = Application.Current.MainWindow;
                var objControl = (System.Windows.Controls.Control)FindVisualChildByName(mainWindow, controlName);
                if (objControl != null)
                {
                    objControl.Focus();
                }
            }
            base.DoAction(args);
        }

        private void RegisterGlobalShortcutKeys()
        {
            try
            {

                // Get active global keyboard shortcut keys configurations.
                Microsoft.Xrm.Sdk.Messages.RetrieveMultipleRequest reqKeys = new Microsoft.Xrm.Sdk.Messages.RetrieveMultipleRequest();
                QueryExpression queryKeys = new QueryExpression();
                queryKeys.EntityName = "udo_globalkeyboardshortcut";
                queryKeys.ColumnSet = new ColumnSet(new string[] { "udo_shortcutkey", "udo_actioncall" });
                queryKeys.Criteria = new FilterExpression(LogicalOperator.And);
                queryKeys.Criteria.AddCondition(new ConditionExpression("statuscode", ConditionOperator.Equal, 1));
                queryKeys.Criteria.AddCondition(new ConditionExpression("udo_actioncall", ConditionOperator.NotNull));
                queryKeys.Criteria.AddCondition(new ConditionExpression("udo_shortcutkey", ConditionOperator.NotNull));
                reqKeys.Query = queryKeys;
                Microsoft.Xrm.Sdk.Messages.RetrieveMultipleResponse resKeys = (Microsoft.Xrm.Sdk.Messages.RetrieveMultipleResponse)this._client.CrmInterface.OrganizationServiceProxy.Execute(reqKeys);

                // Register global keyboard shortcut keys action calls as Key Binding Gestures.
                Window window = Application.Current.MainWindow;
                foreach (Entity globalShortcutKey in resKeys.EntityCollection.Entities)
                {
                    try
                    {
                        // Obtain configured action call.
                        string usdAction = ((EntityReference)globalShortcutKey.Attributes["udo_actioncall"]).Name;

                        // Obtain configured extention keys.
                        string shortcutKey = (string)globalShortcutKey.Attributes["udo_shortcutkey"];

                        // Create keybinding and assigning action call as command parameter.
                        KeyBinding keyBinding = new KeyBinding();
                        keyBinding.Command = ActionCommands.DoActionCommand;
                        keyBinding.CommandParameter = "http://actioncall/" + HttpUtility.UrlEncode(usdAction);
                        KeyGestureValueSerializer gestureSerializer = new KeyGestureValueSerializer();
                        keyBinding.Gesture = (KeyGesture)gestureSerializer.ConvertFromString(shortcutKey, null);
                        window.InputBindings.Add(keyBinding);

                        // Wite to log - the registered global keyboard shortcut keys 
                        logWriter.Log("Global Shortcut Keys : " + usdAction + " using combo " + shortcutKey,System.Diagnostics.TraceEventType.Information);
                    }
                    catch (Exception ex)
                    {
                        logWriter.Log(string.Format(CultureInfo.CurrentCulture, "{0} - Exception occured while binding Global Shortcut Key : {0}", this.ApplicationName, ex.Message), System.Diagnostics.TraceEventType.Information);
                        MessageBox.Show(ex.Message, "Exception occured while binding Global Shortcut Key");
                    }

                }
                //KeyGestureValueSerializer gestureSerializer1 = new KeyGestureValueSerializer();

                //KeyBinding binding = new KeyBinding(new TestCommand(), (KeyGesture)gestureSerializer1.ConvertFromString("CTRL+A", null));
                //Application.Current.MainWindow.InputBindings.Add(binding);
            }
            catch (Exception ex)
            {
                logWriter.Log(string.Format(CultureInfo.CurrentCulture, "{0} - Exception occured while registering Global Shortcut Key : {0}", this.ApplicationName, ex.Message), System.Diagnostics.TraceEventType.Information);
                MessageBox.Show(ex.Message, "Exception occured while retrieving and registering Global Shortcut Key");
            }
        }
        
        private Object FindVisualChildByName(UIElement child, string name)
        {
            if (child is DependencyObject)
            {
                string controlName = child.GetValue(Control.NameProperty) as string;
                if (controlName == name)
                    return child;
            }
            FrameworkElement fe = child as FrameworkElement;
            if (fe != null)
            {
                try { fe.ApplyTemplate(); }
                catch { }
                int childrenCount = VisualTreeHelper.GetChildrenCount(fe);
                for (int i = 0; i < childrenCount; i++)
                {
                    DependencyObject child1 = VisualTreeHelper.GetChild(child, i);
                    Object obj = FindVisualChildByName(child1 as UIElement, name);
                    if (obj != null)
                        return obj;
                }
            }
            ContentControl c = child as ContentControl;
            if (c != null)
            {
                Object obj = FindVisualChildByName(c.Content as UIElement, name);
                if (obj != null)
                    return obj;
            }
            ItemsControl ic = child as ItemsControl;
            if (ic != null)
            {
                foreach (Object elem in ic.Items)
                {
                    if (elem is UIElement)
                    {
                        Object obj = FindVisualChildByName(elem as UIElement, name);
                        if (obj != null)
                            return obj;
                    }
                }
            }
            return null;
        }

    }
}
